<?php
/**
 * Created by PhpStorm.
 * User: Wrh
 * Date: 2016/11/15
 * Time: 18:15
 */

class OrderAction extends BaseAction  {

    public $client;
    public $client_id;
    public $has_error = false;
    public $error_msg = '';

    public $spare_info_array = [
        'addressee',
        'country_id',
        'city',
        'detail_address',
        'mobile',
        'postal_code'
    ];

    public $order_info_array = [
        'price_terms' => '请选择价格条款',
        'tariff_payment' => '请选择关税支付',
        'settlement' => '请选择结汇方式',
        'mode_of_transportation' => '请输入运输方式',
        'express_service' => '请选择具体运输方式',
        'export_reason' => '请选择出口原因',
        'export_nature' => '请选择出口性质',
    ];

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->client_id = session('hkwcd_user.user_id');
        $this->client = M('Client')->where(['status' => 1, 'id' => $this->client_id])->find();

        $order_detail_unit = [];
        $order_detail_unit = M("ProductUnit")
            ->select();
        if( $order_detail_unit ) {
            $temp = [];
            foreach( $order_detail_unit as $k => $v ) {
                $temp[$v["en_name"]] = $v["name"];
            }
            $order_detail_unit = $temp;
        }

        $channel_list = M('Channel')->where(['status' => 1])->select();

        $init_data = [
            "order_detail_unit" => $order_detail_unit,
            "package_type" => C('package_type'),
            "price_terms" => C('price_terms'),
            "tariff_payment" => C('tariff_payment'),
            "settlement" => C('settlement'),
            "express_service" => C('express_service'),
            "export_reason" => C('export_reason'),
            "export_nature" => C('export_nature'),
            "package_type" => C('package_type'),
            "channel_list" => $channel_list,
        ];

        $this->assign("init_data", json_encode($init_data, 320));

        $this->assign('order_detail_unit', $order_detail_unit);
        $this->assign('package_type', C('package_type'));
        $this->assign('price_terms', C('price_terms'));
        $this->assign('tariff_payment', C('tariff_payment'));
        $this->assign('settlement', C('settlement'));
        $this->assign('express_service', C('express_service'));
        $this->assign('export_reason', C('export_reason'));
        $this->assign('export_nature', C('export_nature'));
        $this->assign('channel_list', $channel_list);
        //国家
        $where = array('pid' => 0,'types'=>0);
        $country_list = M('country')->where($where)->order('sort,ename')->select();

        $this->assign('country_list', $country_list);
        if( $country_list ) {
            $temp = [];
            foreach( $country_list as $k => $v ) {
                $temp['item-'.$v['id']] = $v;
            }
            $country_list = $temp;
        }
        $this->assign('json_country_list', json_encode($country_list));

    }


    public function index() {
        $client_id = session('hkwcd_user.user_id');

        $start_date = I('start_date', '');
        $end_date = I('end_date', '');

        $where = [
            'status' => 1,
            'client_id' => $client_id,
        ];

        $condition = [];

        if( $start_date ) {
            $condition['add_time'] = ['gt', $start_date];
        }
        if( $end_date ) {
            $old_end_date = $end_date;
            $end_date = date('Y-m-d', strtotime($end_date) + 3600 * 24);
            $condition['add_time'] = ['lt', $end_date];
        }
        if( $start_date && $end_date ) {
            $condition['add_time'] = ['between', [$start_date, $end_date]];
        } else {
            if( $start_date ) {
                $condition['add_time'] = ['gt', $start_date];
            }
            if( $end_date ) {
                $condition['add_time'] = ['lt', $end_date];
            }
        }
        if( $condition ) {
            if( count($condition) == 2 ) {
                $condition['_logic'] = 'AND';
            }
            $where['_complex'] = $condition;
        }

        //分页
        import('ORG.Util.Page');
        $count = M('ClientOrder')->where($where)->count();

        $page = new Page($count, C('usercenter_page_count'));
        $limit = $page->firstRow. ',' .$page->listRows;

        $order_list = M('ClientOrder')->where($where)->limit($limit)->order('id desc')->select();
        if( $order_list ) {
            foreach( $order_list as $k => $v ) {
                $order_list[$k]['status_str'] = _order_status($v);
            }
        }
        $this->page = $page->show();
        $this->assign('order_list', $order_list);
        $this->assign('title', '订单列表');
        $this->assign('start_date', $start_date);
        $this->assign('end_date', $old_end_date);
        $this->display();
    }

    public function getList() {
        $client_id = session('hkwcd_user.user_id');

        $start_date = I('start_date', '');
        $end_date = I('end_date', '');

        $where = [
            'status' => 1,
            'client_id' => $client_id,
        ];

        $condition = [];

        if( $start_date ) {
            $condition['add_time'] = ['gt', $start_date];
        }
        if( $end_date ) {
            $old_end_date = $end_date;
            $end_date = date('Y-m-d', strtotime($end_date) + 3600 * 24);
            $condition['add_time'] = ['lt', $end_date];
        }
        if( $start_date && $end_date ) {
            $condition['add_time'] = ['between', [$start_date, $end_date]];
        } else {
            if( $start_date ) {
                $condition['add_time'] = ['gt', $start_date];
            }
            if( $end_date ) {
                $condition['add_time'] = ['lt', $end_date];
            }
        }
        if( $condition ) {
            if( count($condition) == 2 ) {
                $condition['_logic'] = 'AND';
            }
            $where['_complex'] = $condition;
        }

        //分页
        import('ORG.Util.Page');
        $count = M('ClientOrder')->where($where)->count();

        $page = I("page", 0, "intval");
        if( $page <= 0 ) {
            $page = 0;
        }
        $offset = $page;
        $limit = C('usercenter_page_count');
        $limit = I("limit", $limit, "intval");
//        $offset = ($page - 1) * $limit;

        $order_list = M('ClientOrder')->where($where)->limit($offset, $limit)->order('id desc')->select();
        if( $order_list ) {
            foreach( $order_list as $k => $v ) {
                $order_list[$k]['status_str'] = _order_status($v);
            }
        }
        $response = [
            "data" => $order_list,
            "total" => $count,
        ];
        echo json_encode($response);
        exit;
    }

    public function getOrder() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }

        $spare_receive = [];
        if( !empty($order["enable_spare"]) ) {
            $spare_receive = [
                "company" => $order["spare_company"],
                "country_id" => $order["spare_country_id"],
                "country_name" => $order["spare_country_name"],
                "en_country_name" => $order["spare_country_en_name"],
                "state" => $order["spare_state"],
                "city" => $order["spare_city"],
                "detail_address" => $order["spare_detail_address"],
                "addressee" => $order["spare_addressee"],
                "mobile" => $order["spare_mobile"],
                "phone" => $order["spare_phone"],
                "postal_code" => $order["spare_postal_code"],
                "receiver_code" => $order["spare_receiver_code"],
            ];
        }

        $delivery = [
            "id" => $order["delivery_id"],
            "company" => $order["delivery_company"],
            "country_id" => $order["delivery_country_id"],
            "country_name" => $order["delivery_country_name"],
            "en_country_name" => $order["delivery_country_en_name"],
            "state" => $order["delivery_state"],
            "city" => $order["delivery_city"],
            "detail_address" => $order["delivery_detail_address"],
            "consignor" => $order["delivery_consignor"],
            "mobile" => $order["delivery_mobile"],
            "phone" => $order["delivery_phone"],
            "postal_code" => $order["delivery_postal_code"],
            "exporter_code" => $order["delivery_exporter_code"],
        ];

        $receive_address = M("ReceiveAddress")
            ->where(["id" => $order["receive_id"]])
            ->find();

        $receive = [
            "id" => $order["receive_id"],
            "company" => $order["receive_company"],
            "country_id" => $order["receive_country_id"],
            "country_name" => $order["receive_country_name"],
            "en_country_name" => $order["receive_country_en_name"],
            "state" => $order["receive_state"],
            "city" => $order["receive_city"],
            "detail_address" => $order["receive_detail_address"],
            "addressee" => $order["receive_addressee"],
            "mobile" => $order["receive_mobile"],
            "phone" => $order["receive_phone"],
            "postal_code" => $order["receive_postal_code"],
            "receiver_code" => $order["receive_receiver_code"],
            "type" => $receive_address["type"],
        ];

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();
        if( $order_detail ) {
            $temp = [];
            foreach( $order_detail as $k => $v ) {
                $v["id"] = $v["product_id"];
                unset($v["product_id"]);
                $v["total_declared"] = $v["single_declared"] * $v["count"];
                $temp[] = $v;
            }
            $order_detail = $temp;
        }

        $order_specifications = M('ClientOrderSpecifications')->where(['order_num' => $order['order_num']])->select();
        if( $order_specifications ) {
            $temp = [];
            $specifications_id_list = [];
            foreach( $order_specifications as $s ) {
                $specifications_id_list[] = $s["id"];
            }
            if( $specifications_id_list ) {
                $product_list = M('ClientOrderMap')
                    ->alias("m")
                    ->field("p.*, m.specifications_id, m.number")
                    ->join("left join hx_client_order_detail as p on p.id = m.detail_id")
                    ->where(["specifications_id" => ["IN", $specifications_id_list]])
                    ->select();
                if( $product_list ) {
                    foreach( $order_specifications as $k => $s ) {
                        foreach( $product_list as $p ) {
                            if( $s["id"] == $p["specifications_id"] ) {
                                unset($p["specifications_id"]);
                                $p["id"] = $p["product_id"];
                                unset($p["product_id"]);
                                $s["productList"][] = $p;
                            }
                        }
                        $temp[$k] = $s;
                    }
                }
            }
            $order_specifications = $temp;
        }
        $order_fee = M('ClientOrderFee')->where(['order_id' => $id])->find();

        $order['status_str'] = _order_status($order);
        $this->response["code"] = 1;
        $this->response["msg"] = "";
        $this->response["data"] = [
            "order_info" => $order,
            "delivery_address" => $delivery,
            "receive_address" => $receive,
            "spare_receive" => $spare_receive,
            "product_list" => $order_detail,
            "specification_list" => $order_specifications,
            "order_fee" => $order_fee,
        ];
        echo json_encode($this->response, 320);exit;
    }

    public function add() {

        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['id'  => $client_id])->find();

        $default_delivery = M('DeliveryAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_delivery = $default_delivery ? 1 : 0;
        $selected_delivery_id = $default_delivery ? $default_delivery['id'] : 0;

        $default_receive = M('ReceiveAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_receive = $default_receive ? 1 : 0;
        $selected_receive_id = $default_receive ? $default_receive['id'] : 0;



        $this->assign('client', $client);

        $this->assign('default_delivery', $default_delivery);
        $this->assign('json_delivery', json_encode($default_delivery));
        $this->assign('default_delivery_id', $selected_delivery_id);
        $this->assign('has_default_delivery', $has_default_delivery);

        $this->assign('default_receive', $default_receive);
        $this->assign('json_receive', json_encode($default_receive));
        $this->assign('default_receive_id', $selected_receive_id);
        $this->assign('has_default_receive', $has_default_receive);
        if( empty($client['company']) ) {
            $this->assign('default_company', json_encode(''));
        } else {
            $this->assign('default_company', json_encode($client['company']));
        }

        $this->assign('title', '添加订单');

        $this->display();
    }

    public function new_add() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['id'  => $client_id])->find();

        $default_delivery = M('DeliveryAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_delivery = $default_delivery ? 1 : 0;
        $selected_delivery_id = $default_delivery ? $default_delivery['id'] : 0;

        $default_receive = M('ReceiveAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_receive = $default_receive ? 1 : 0;
        $selected_receive_id = $default_receive ? $default_receive['id'] : 0;



        $this->assign('client', $client);

        $this->assign('default_delivery', $default_delivery);
        $this->assign('json_delivery', json_encode($default_delivery));
        $this->assign('default_delivery_id', $selected_delivery_id);
        $this->assign('has_default_delivery', $has_default_delivery);

        $this->assign('default_receive', $default_receive);
        $this->assign('json_receive', json_encode($default_receive));
        $this->assign('default_receive_id', $selected_receive_id);
        $this->assign('has_default_receive', $has_default_receive);
        if( empty($client['company']) ) {
            $this->assign('default_company', json_encode(''));
        } else {
            $this->assign('default_company', json_encode($client['company']));
        }

        $this->assign('title', '添加订单');

        $this->display();
    }

    public function ajaxAdd() {
        $data = $this->_get_order_params();
        $insert_data[] = $this->_build_delivery_address($data);
        $insert_data[] = $this->_build_receive_address($data);
        $insert_data[] = $this->_build_spare_address($data);
        $insert_data[] = $this->_build_order_info($data);

        $product_list = $this->_build_order_detail($data);
        $specification_list = $this->_build_order_specification($data);

        $temp = [];
        foreach( $insert_data as $v ) {
            $temp = array_merge($temp, $v);
        }
        $insert_data = $temp;

        $commit = $data['commit'];
        unset($insert_data['commit']);
        unset($insert_data["product_list"]);
        unset($insert_data["order_info"]);
        unset($insert_data["specification_list"]);
        unset($insert_data["spare_receive_info"]);

        $insert_data['client_status'] = $commit == 0 ? 0 : 1;
        $msg = $commit == 0 ? '添加订单成功' : '订单添加成功，并已提交';
        $time = time();
        if( $commit == 1 ) {
            $insert_data['commit_time'] = date('Y-m-d H:i:s', $time);
            $insert_data['add_time'] = date('Y-m-d H:i:s', $time);
        } else {
            $insert_data['add_time'] = date('Y-m-d H:i:s', $time);
        }
        $insert_data['client_id'] = $this->client_id;

        //事务开始，插入订单
        $model = new Model();
        try {
            $transaction = true;
            $model->startTrans();

            /**
             * 1、插入订单，返回订单编号
             * 2、插入订单详情，
             * 3、插入订单规格
             * 4、插入详情和规格的映射
             */
            $order_id = 0;
            $order_num = '';
            $today_time = strtotime(date('Y-', time()) . '01-01');
            $total_map = [
//            'client_id' => $this->client_id,
                'add_time' => ['gt', date('Y-m-d H:i:s', $today_time)],
            ];
//        echo date('Y-m-d H:i:s', $today_time);exit;
            for ($i = 0; $i < 5; $i++) {
                $total = M('ClientOrder')->where($total_map)->count();
//            echo $total;exit;
                $total++;
//            echo $total;exit;
                $total_number = $this->_total_to_str($total);
//            $order_num = 'HD' . date('Ymd', time()) . $this->client_id . $total_number;
                $order_num = date('Ymd', time()) . $total_number;
//            echo $order_num;exit;
                $insert_data['order_num'] = $order_num;
                $add_order_result = M('ClientOrder')->add($insert_data);
                if (!$add_order_result) {
                    $transaction = false;
                    throw new Exception("添加订单失败");
                } else {
                    $order_id = M('ClientOrder')->getLastInsID();
                    break;
                }
            }

            if ($transaction) {
                foreach ($product_list as $k => $v) {
                    $product = $v;
                    $product['order_num'] = $order_num;
                    $product['order_id'] = $order_id;
                    $temp_result = M('ClientOrderDetail')->field(true)
                        ->add($product);
                    if (!$temp_result) {
                        $transaction = false;
                        throw new Exception("添加订单详情失败");
                        break;
                    } else {
                        $product_list[$k]['id'] = M('ClientOrderDetail')->getLastInsID();
                    }
                }
            }

            if ($transaction) {
                foreach ($specification_list as $k => $v) {
                    $specification = $v;
                    unset($specification['id']);
                    $specification['order_num'] = $order_num;
                    $specification['order_id'] = $order_id;
                    $temp_result = M('ClientOrderSpecifications')->field(true)
                        ->add($specification);
                    if (!$temp_result) {
                        $transaction = false;
                        throw new Exception("添加订单规格失败");
                        break;
                    } else {
                        $specification_list[$k]['id'] = M('ClientOrderSpecifications')->getLastInsID();
                    }
                }
            }

            if ($transaction) {
                foreach ($specification_list as $k => $v) {
                    foreach ($v['productList'] as $d) {
                        foreach( $product_list as $p ) {
                            if( $p["product_id"] == $d["id"]) {
                                $temp = [
                                    'specifications_id' => $v['id'],
                                    'detail_id' => $p['id'],
//                                    'number' => $v['detail_number'][$d],
                                    'number' => $d['number'],
                                ];
                                $temp_result = M('ClientOrderMap')->add($temp);
                                if (!$temp_result) {
                                    throw new Exception("添加订单规格失败");
                                    $transaction = false;
                                    break;
                                }
                                break;
                            }
                        }

                    }
                    if (!$transaction) {
                        break;
                    }
                }
            }

            if ($transaction) {
                $model->commit();
                //插入操作日志
                $log_data = [
                    'order_num' => $order_num,
                    'order_id' => $order_id,
                    'user_id' => $this->client_id,
                    'type' => 1,
                    'content' => $msg,
                ];
                M('ClientOrderLog')->add($log_data);

                $this->response['code'] = 1;
                $this->response['msg'] = $msg;
                $this->response['url'] = U('Order/index');
            } else {
                $model->rollback();
//            echo $model->getError();
                $this->response['msg'] = '系统繁忙，请稍后重试';
//            $this->response['msg'] = $model->getDbError();
            }
        } catch ( \Exception $e ) {
            $model->rollback();
            $this->response['msg'] = $e->getMessage();
        }
        echo json_encode($this->response);
        exit;
    }

    private function _get_order_params() {
        $data = [];
        $data['delivery_id'] = I('post.delivery_id', 0, 'intval');
        $data['receive_id'] = I('post.receive_id', 0, 'intval');
        $data['enable_spare'] = I('post.enable_spare');
        $data['spare_receive_info'] = I('post.spare_receive_info', []);
        $data['order_info'] = I('post.order_info', []);
        $data['product_list'] = I('post.product_list', [], "");
        $data['specification_list'] = I('post.specification_list', [], "");
        $data['commit'] = I('post.commit', 0, 'trim');
        return $data;
    }

    private function _build_delivery_address($data) {
        //构造发货数据
        $temp = [];
        $where = ['status' => 1, 'client_id' => $this->client_id, 'id' => $data['delivery_id']];
        $delivery = M('DeliveryAddress')->where($where)->find();
        if( empty($delivery) ) {
            $this->has_error = true;
            $this->error_msg = '请输入发货信息';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        } else {
            $temp['delivery_id'] = $data['delivery_id'];
            $temp['delivery_company'] = $delivery['company'];
            $temp['delivery_consignor'] = $delivery['consignor'];
            $temp['delivery_country_id'] = $delivery['country_id'];
            $temp['delivery_state'] = $delivery['state'];
            $temp['delivery_city'] = $delivery['city'];
            $temp['delivery_phone'] = $delivery['phone'];
            $temp['delivery_mobile'] = $delivery['mobile'];
            $temp['delivery_detail_address'] = $delivery['detail_address'];
            $temp['delivery_postal_code'] = $delivery['postal_code'];
            $temp['exporter_code'] = $delivery['exporter_code'];

            $country = M('Country')->where(['id' => $temp['delivery_country_id']])->find();
            if( $country ) {
                $temp['delivery_country_name'] = $country['name'];
                $temp['delivery_country_en_name'] = $country['ename'];
            }
        }
        return $temp;
    }

    private function _build_receive_address($data) {
        //构造收货数据
        $temp = [];
        $where = ['status' => 1, 'client_id' => $this->client_id, 'id' => $data['receive_id']];
        $receive = M('ReceiveAddress')->where($where)->find();
        if( empty($receive) ) {
            $this->has_error = true;
            $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请输入发货信息' : '请输入发货信息';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        } else {
            $temp['receive_id'] = $receive["id"];
            $temp['receive_company'] = $receive['company'];
            $temp['receive_addressee'] = $receive['addressee'];
            $temp['receive_country_id'] = $receive['country_id'];
            $temp['receive_state'] = $receive['state'];
            $temp['receive_city'] = $receive['city'];
            $temp['receive_phone'] = $receive['phone'];
            $temp['receive_mobile'] = $receive['mobile'];
            $temp['receive_detail_address'] = $receive['detail_address'];
            $temp['receive_postal_code'] = $receive['postal_code'];
            $temp['receiver_code'] = $receive['receiver_code'];
            $country = M('Country')->where(['id' => $temp['receive_country_id']])->find();
            if( $country ) {
                $temp['receive_country_name'] = $country['name'];
                $temp['receive_country_en_name'] = $country['ename'];
            }
        }
        return $temp;
    }

    private function _build_spare_address($data)
    {
        $temp = [];
        if (empty($data['enable_spare'])) {
            $temp['spare_company'] = '';
            $temp['spare_addressee'] = '';
            $temp['spare_country_id'] = '';
            $temp['spare_state'] = '';
            $temp['spare_city'] = '';
            $temp['spare_detail_address'] = '';
            $temp['spare_phone'] = '';
            $temp['spare_mobile'] = '';
            $temp['spare_postal_code'] = '';
            $temp['spare_receiver_code'] = '';
            $temp['spare_country_name'] = '';
            $temp['spare_country_en_name'] = '';
            $temp["enable_spare"] = 0;
        } else {
            $temp["enable_spare"] = 1;
            foreach ($this->spare_info_array as $v) {
                if (empty($data["spare_receive_info"][$v])) {
                    $this->has_error = true;
                    $this->error_msg = $this->error_msg ? $this->error_msg . '<br />请完善备用信息,*为必填' : '请完善备用信息,*为必填';
                    $this->response['msg'] = $this->error_msg;
                    echo json_encode($this->response);
                    exit;
                    break;
                }
                $temp["spare_{$v}"] = $data["spare_receive_info"][$v];
            }

            $country = M('Country')->where(['id' => $data["spare_receive_info"]['country_id']])->find();
            if ($country) {
                $temp['spare_country_name'] = $country['name'];
                $temp['spare_country_en_name'] = $country['ename'];
            }
        }
//        var_dump($temp);exit;
        return $temp;
    }

    private function _build_order_info($data) {
        //构造其他信息
        $temp = $data["order_info"];
        $channel = M('Channel')->where(['status' => 1, 'id' => $temp['channel']])->find();
        if( empty($channel) ) {
            $this->has_error = true;
            $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请选择渠道' : '请选择渠道';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        }
        $temp["channel_id"] = $channel["id"];
        $temp['channel_name'] = $channel['name'];
        $temp['channel_en_name'] = $channel['en_name'];
        $temp['package_type'] = $data['package_type'] == 1 ? 1 : 2;
        unset($temp["channel"]);

        foreach( $this->order_info_array as $k => $v ) {
            if( $temp[$k] == '' ) {
                $this->has_error = true;
                $this->error_msg = $this->error_msg ? $this->error_msg.'<br />'.$v : $v;
                $this->response['msg'] = $this->error_msg;
                echo json_encode($this->response);
                exit;
            }
        }
        return $temp;
    }

    private function _build_order_detail($data) {
        //构造产品详情
        if( empty($data["product_list"]) ) {
            $this->has_error = true;
            $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请输入产品详情' : '请输入产品详情';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        }
        $temp = [];
        if( !is_array($data["product_list"]) ) {
            $this->has_error = true;
            $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请输入产品详情' : '请输入产品详情';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        } else {
            if( count($data["product_list"]) < 1 ) {
                $this->has_error = true;
                $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请输入产品详情' : '请输入产品详情';
                $this->response['msg'] = $this->error_msg;
                echo json_encode($this->response);
                exit;
            } else {
                foreach ($data["product_list"] as $k => $v) {
                    $temp[$k]["product_id"] = $v["id"];
                    $temp[$k]['product_name'] = isset($v['product_name']) ? $v['product_name'] : '';
                    $temp[$k]['en_product_name'] = isset($v['en_product_name']) ? $v['en_product_name'] : '';
                    $temp[$k]['goods_code'] = isset($v['goods_code']) ? $v['goods_code'] : '';
                    $temp[$k]['count'] = isset($v['count']) ? $v['count'] : 0;
                    $temp[$k]['unit'] = isset($v['unit']) ? $v['unit'] : '';
                    $temp[$k]['single_declared'] = isset($v['single_declared']) ? $v['single_declared'] : 0;
                    $temp[$k]['origin'] = isset($v['origin']) ? $v['origin'] : 'China';
                    $temp[$k]["texture"] = isset($v['texture']) ? $v['texture'] : '';
                }
                $order_detail = $temp;
                foreach( $order_detail as $k => $v ) {
                    if( $v['product_name'] == '' || $v['en_product_name'] == '' || $v['goods_code'] == '' || $v['count'] <= 0 || $v['unit'] == '' || $v['single_declared'] <= 0 || $v['origin'] == '' ) {
                        $this->has_error = true;
                        $this->error_msg = $this->error_msg ? $this->error_msg.'<br />产品详情内容有误，请重新输入' : '产品详情内容有误，请重新输入';
                        $this->response['msg'] = $this->error_msg;
                        echo json_encode($this->response);
                        exit;
                        break;
                    }
                }
            }
        }
        return $order_detail;
    }

    private function _build_order_specification($data) {
        //构造产品规格
        $order_specifications = $data["specification_list"];
        if( !is_array($data["specification_list"]) ) {
            $this->has_error = true;
            $this->error_msg = $this->error_msg ? $this->error_msg.'<br />请输入产品规格' : '请输入产品规格';
            $this->response['msg'] = $this->error_msg;
            echo json_encode($this->response);
            exit;
        } else {
            if (count($data["specification_list"]) < 1) {
                $this->has_error = true;
                $this->error_msg = $this->error_msg ? $this->error_msg . '<br />请输入产品规格' : '请输入产品规格';
                $this->response['msg'] = $this->error_msg;
                echo json_encode($this->response);
                exit;
            } else {
                foreach( $data["specification_list"] as $k => $v ) {
                    $order_specifications[$k]['count'] = intval($v['count']);
                    $order_specifications[$k]['weight'] = floatval($v['weight']);
                    $order_specifications[$k]['length'] = floatval($v['length']);
                    $order_specifications[$k]['width'] = floatval($v['width']);
                    $order_specifications[$k]['height'] = floatval($v['height']);
                    $order_specifications[$k]["product_list"] = $v["product_list"];
                }
                foreach( $data["specification_list"] as $k => $v ) {
                    if( $v['weight'] <= 0 || $v['length'] < 0 || $v['width'] < 0 || $v['height'] < 0 || $v['count'] < 0 ) {
                        $this->has_error = true;
                        $this->error_msg = $this->error_msg ? $this->error_msg.'<br />产品规格内容有误，请重新输入' : '产品规格内容有误，请重新输入';
                        $this->response['msg'] = $this->error_msg;
                        echo json_encode($this->response);
                        exit;
                        break;
                    }
                }
            }
        }
        return $order_specifications;
    }

    public function edit() {
        $client_id = session('hkwcd_user.user_id');

        $this->title = "编辑订单";

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( $order['client_status'] != 0 ) {
            $this->error('当前订单不是可编辑状态');
        }

        $order_detail = M('ClientOrderDetail')->where(['order_id' => $id])->select();
        $d_cursor = 0;

        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order_detail[$k]["detail_goods_code"] = $v["goods_code"];
                unset($order_detail[$k]["goods_code"]);
                $order_detail[$k]["detail_count"] = $v["count"];
                unset($order_detail[$k]["count"]);
            }
        }

        $order_specifications = M('ClientOrderSpecifications')
            ->alias('s')
            ->field('s.*, m.detail_id, m.number, cd.product_name, cd.en_product_name, cd.unit, cd.goods_code, cd.origin')
            ->join('inner join hx_client_order_map as m on m.specifications_id = s.id')
            ->join('left join hx_client_order_detail as cd on m.detail_id = cd.id')
            ->where(['s.order_num' => $order['order_num']])
            ->select();
//        echo M('ClientOrderSpecifications')->getLastSql();exit;
        $s_cursor = 0;
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                if( !isset($temp[$v['id']]) ) {
                    $temp[$v['id']] = $v;
                }
                $temp[$v['id']]['cargo'][] = [
                    'detail_id' => $v['detail_id'],
                    'specifications_id' => $v['id'],
                    'product_name' => $v['product_name'],
                    'en_product_name' => $v['en_product_name'],
                    'detail_goods_code' => $v['goods_code'],
                    'origin' => $v['origin'],
                    'product_count' => $v['number'],
                ];
                $last_index = count($temp[$v['id']]['cargo']) - 1;
                foreach( $order_detail as $key => $d ) {
                    if( $d['id'] == $v['detail_id'] ) {
                        $temp[$v['id']]['cargo'][$last_index]['product_index'] = $key;
                    }
                }
            }
            $order_specifications = $temp;
            $temp = [];
            $start = 1;
            foreach( $order_specifications as $v ) {
                $v['index'] = $v['id'];
                $end = $start + $v["count"] - 1;
                $v['id'] = $start ."-". $end;
                $start = $start + $v['count'];
                $v['rate'] = $v['length'] * $v['width'] * $v['height'] / 5000;
                $temp[] = $v;
            }
            $order_specifications = $temp;
        }
//        var_dump($order_specifications);exit;
        $selected_delivery = M('DeliveryAddress')
            ->alias("d")
            ->field("d.*, c.name ")
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where(['id' => $order['delivery_id']])
            ->find();
        $selected_receive = M('ReceiveAddress')->where(['id' => $order['receive_id']])->find();


        $this->assign('order', $order);
        $this->assign('order_detail', json_encode($order_detail));
        $this->assign('order_specifications', json_encode($order_specifications));

        $this->assign('has_default_delivery', true);
        $this->assign('has_default_receive', true);
        $this->assign('json_delivery', json_encode($selected_delivery));
        $this->assign('json_receive', json_encode($selected_receive));
        $this->assign('s_cursor', $s_cursor);
        $this->assign('d_cursor', $d_cursor);
        if( empty($client['company']) ) {
            $this->assign('default_company', json_encode(''));
        } else {
            $this->assign('default_company', json_encode($client['company']));
        }
        $this->display();
    }

    public function ajaxEdit() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }

        $data = $this->_get_order_params();

        $update_data = [];
        $update_data[] = $this->_build_delivery_address($data);
        $update_data[] = $this->_build_receive_address($data);
        $update_data[] = $this->_build_spare_address($data);
        $update_data[] = $this->_build_order_info($data);

        $product_list = $this->_build_order_detail($data);
        $specification_list = $this->_build_order_specification($data);

        $temp = [];
        foreach( $update_data as $v ) {
            $temp = array_merge($temp, $v);
        }
        $update_data = $temp;

        $commit = $data['commit'];
        unset($update_data['commit']);
        unset($update_data["product_list"]);
        unset($update_data["order_info"]);
        unset($update_data["specification_list"]);
        unset($update_data["spare_receive_info"]);


        $commit = $data['commit'];
        unset($data['commit']);
        $update_data['client_status'] = $commit == 0 ? 0 : 1;
        $msg = $commit == 0 ? '修改订单成功' : '订单修改成功，并已提交';
        if( $commit == 1 ) {
            $time = time();
            $data['commit_time'] = date('Y-m-d H:i:s', $time);
        }
        $update_data['client_id'] = $client_id;

        //事务开始
        //修改订单

        $order_id = $id;
        $order_num = $order["order_num"];

        $model = new Model();

        try {
            $transaction = true;
            $model->startTrans();

            /**
             * 1、更新订单
             * 2、删除原订单详情，删除原订单规格，删除原详情和规格的映射
             * 3、插入新的订单详情
             * 4、插入新的订单规格
             * 5、插入新的详情和规格的映射
             */

            $result = M('ClientOrder')
                ->where(['id' => $id, 'client_id' => $client_id])
                ->save($update_data);

            if (!is_numeric($result)) {
                throw new Exception("修改订单失败");
                $transaction = false;
            }

            $old_specifications_list = [];
            if( $transaction ) {
                $old_specifications = M("ClientOrderSpecifications")
                    ->field("id")
                    ->where(["order_id" => $id])
                    ->select();
                if( $old_specifications ) {
                    foreach( $old_specifications as $v ) {
                        $old_specifications_list[] = $v['id'];
                    }
                }
            }

            if ($transaction) {
                $truncate_order_detail = M("ClientOrderDetail")
                    ->where(['order_id' => $id])
                    ->delete();
                if (!is_numeric($truncate_order_detail)) {
                    throw new Exception("修改订单详情失败~");
                    $transaction = false;
                }
            }

            if ($transaction) {
                $truncate_order_specifications = M("ClientOrderSpecifications")
                    ->where(['order_id' => $id])
                    ->delete();
                if (!is_numeric($truncate_order_specifications)) {
                    throw new Exception("修改订单规格失败！");
                    $transaction = false;
                }
            }


            if ($transaction) {
                $truncate_map = M("ClientOrderMap")
                    ->where("specifications_id in (" . implode(',', $old_specifications_list) . ")")
                    ->delete();
                if (!is_numeric($truncate_map)) {
                    throw new Exception("修改订单规格失败~");
                    $transaction = false;
                }
            }


            if ($transaction) {
                foreach ($product_list as $k => $v) {
                    $product = $v;
                    $product['order_num'] = $order_num;
                    $product['order_id'] = $order_id;
                    $temp_result = M('ClientOrderDetail')->field(true)
                        ->add($product);
                    if (!$temp_result) {
                        $transaction = false;
                        throw new Exception("修改订单详情失败");
                        break;
                    } else {
                        $product_list[$k]['id'] = M('ClientOrderDetail')->getLastInsID();
                    }
                }
            }

            if ($transaction) {
                foreach ($specification_list as $k => $v) {
                    $specification = $v;
                    unset($specification['id']);
                    $specification['order_num'] = $order_num;
                    $specification['order_id'] = $order_id;
                    $temp_result = M('ClientOrderSpecifications')->field(true)
                        ->add($specification);
                    if (!$temp_result) {
                        $transaction = false;
                        throw new Exception("修改订单规格失败");
                        break;
                    } else {
                        $specification_list[$k]['id'] = M('ClientOrderSpecifications')->getLastInsID();
                    }
                }
            }

            if ($transaction) {
                foreach ($specification_list as $k => $v) {
                    foreach ($v['productList'] as $d) {
                        foreach( $product_list as $p ) {
                            if( $p["product_id"] == $d["id"]) {
                                $temp = [
                                    'specifications_id' => $v['id'],
                                    'detail_id' => $p['id'],
//                                    'number' => $v['detail_number'][$d],
                                    'number' => $d['number'],
                                ];
                                $temp_result = M('ClientOrderMap')->add($temp);
                                if (!$temp_result) {
                                    throw new Exception("修改订单规格失败");
                                    $transaction = false;
                                    break;
                                }
                                break;
                            }
                        }

                    }
                    if (!$transaction) {
                        break;
                    }
                }
            }


            if ($transaction) {
                $model->commit();
                //插入操作日志
                $log_data = [
                    'order_num' => $order['order_num'],
                    'order_id' => $order['id'],
                    'user_id' => $client_id,
                    'type' => 1,
                    'content' => $msg,
                ];
                M('ClientOrderLog')->add($log_data);

                $this->response['code'] = 1;
                $this->response['msg'] = $msg;
                $this->response['url'] = U('Order/index');
            } else {
                $model->rollback();
                $this->response['msg'] = '系统繁忙，请稍后重试';
                $this->response['msg'] = $model->getDbError();
            }
        } catch ( \Exception $e ) {
            $model->rollback();
            $this->response['msg'] = $e->getMessage();
        }
        echo json_encode($this->response);
        exit;

    }

    public function ajaxAddDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $has_error = false;
        $error_msg = '';

        $product_name = trim(I('product_name'));
        $en_product_name = trim(I('en_product_name'));
        $goods_code = trim(I('goods_code'));
        $count = intval(I('count'));
        $single_declared = floatval(I('single_declared'));
        $unit = trim(I('unit'));
        $declared = floatval(I('declared'));
        $origin = trim(I('origin'));

        if( $product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入中文品名' : '请输入品名';
        }

        if( $en_product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入英文品名' : '请输入英文品名';
        }

        if( $goods_code == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品编码' : '请输入商品编码';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $single_declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入单件申报价值' : '请输入单件申报价值';
        }

        if( $origin == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入原产地' : '请输入原产地';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'product_name' => $product_name,
            'en_product_name' => $en_product_name,
            'goods_code' => $goods_code,
            'count' => $count,
            'unit' => $unit,
            'single_declared' => $single_declared,
            'origin' => $origin,
            'order_id' => $order_id,
            'order_num' => $order['order_num'],
        ];
        $result = M('ClientOrderDetail')->add($data);
        if( $result ) {
            $data['id'] = M('ClientOrderDetail')->getLastInsID();
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '添加商品信息成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '添加商品信息成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxEditDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $detail_id = I('id');
        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $has_error = false;
        $error_msg = '';

        $product_name = trim(I('product_name'));
        $en_product_name = trim(I('en_product_name'));
        $goods_code = trim(I('goods_code'));
        $count = intval(I('count'));
        $single_declared = floatval(I('single_declared'));
        $unit = trim(I('unit'));
        $declared = floatval(I('declared'));
        $origin = trim(I('origin'));

        if( $product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入中文品名' : '请输入品名';
        }

        if( $en_product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入英文品名' : '请输入英文品名';
        }

        if( $goods_code == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品编码' : '请输入商品编码';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $single_declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入单件申报价值' : '请输入单件申报价值';
        }

        if( $origin == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入原产地' : '请输入原产地';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'product_name' => $product_name,
            'en_product_name' => $en_product_name,
            'goods_code' => $goods_code,
            'count' => $count,
            'unit' => $unit,
            'single_declared' => $single_declared,
            'declared' => $declared,
            'origin' => $origin,
        ];

        $result = M('ClientOrderDetail')->where(['id' => $detail_id, 'order_id' => $order_id])->save($data);
        if( is_numeric($result) ) {
            $data['id'] = $detail_id;
            $data['order_id'] = $order_id;
            $data['order_num'] = $order['order_num'];
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '编辑商品信息成功',
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '编辑商品信息成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;

    }

    public function ajaxDeleteDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $detail_id = I('id');
        $order_id = I('order_id');
        $index = I('index');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $temp = M('ClientOrderDetail')->where(['order_id' => $order_id])->select();
        $remain_count = count($temp);
        if( $remain_count <= 1 ) {
            $this->response['msg'] = '至少保留一项商品';
            echo json_encode($this->response);
            exit;
        }
        $exists = M('ClientOrderMap')->where(['detail_id' => $detail_id])->find();
        if( $exists ) {
            $this->response['msg'] = '该商品已被使用，无法删除';
            echo json_encode($this->response);
            exit;
        }

        $result = M('ClientOrderDetail')->where(['order_id' => $order_id, 'id' => $detail_id])->delete();
        if( $result ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '删除商品信息成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '删除商品信息成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data']['index'] = $index;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxAddSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }

        $weight = floatval(I('weight'));
        $length = floatval(I('length'));
        $width = floatval(I('width'));
        $height = floatval(I('height'));
        $count = floatval(I('count'));
        $remark = trim(I('remark'));
        $detail = $_POST['detail'];

        $has_error = false;
        $error_msg = '';

        if( $weight <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入重量' : '请输入重量';
        }

        if( $length <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入长度' : '请输入长度';
        }

        if( $width <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入宽度' : '请输入宽度';
        }

        if( $height <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入高度' : '请输入高度';
        }

        if( !is_array($detail) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品' : '请输入商品';
        } else {
            foreach( $detail as $k => $v ) {
                $v['detail_number'] = intval($v['detail_number']);
                $map = ['id' => $v['detail_id'], 'order_id' => $order_id];
                if( !M('ClientOrderDetail')->where($map)->find() || $v['detail_number'] <= 0 ) {
                    $has_error = true;
                    $error_msg = $error_msg ? $error_msg.'<br />请输入商品以及每箱数量' : '请输入商品以及每箱数量';
                    break;
                }
            }
        }


        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入箱数' : '请输入箱数';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        $data = [
            'weight' => $weight,
            'length' => $length,
            'width' => $width,
            'height' => $height,
            'count' => $count,
            'remark' => $remark,
            'order_id' => $order_id,
            'order_num' => $order['order_num'],
        ];

        $model = new Model;
        $model->startTrans();
        $transaction = true;

        $result = M('ClientOrderSpecifications')->add($data);
        if( !$result ) {
            $transaction = false;
        } else {
            $sid = M('ClientOrderSpecifications')->getLastInsID();
        }

        if( $transaction ) {
            foreach( $detail as $k => $v ) {
                $map_data = [
                    'detail_id' => $v['detail_id'],
                    'specifications_id' => $sid,
                    'number' => $v['detail_number'],
                ];
                $result = M('ClientOrderMap')->add($map_data);
                if( !$result ) {
                    $transaction = false;
                    break;
                }
            }
        }

        if( $transaction ) {
            $model->commit();
            $order_specifications = M('ClientOrderSpecifications')
                ->alias('s')
                ->field('s.*, m.detail_id, m.number')
                ->join('inner join hx_client_order_map as m on m.specifications_id = s.id')
                ->where(['s.id' => $sid])
                ->select();
            $key = '';
            if( $order_specifications ) {
                $temp = [];
                foreach( $order_specifications as $k => $v ) {
                    if( !isset($temp['item-'.$v['id']]) ) {
                        $temp['item-'.$v['id']] = $v;
                    }
                    $temp['item-'.$v['id']]['detail'][] = 'item-'.$v['detail_id'];
                    $temp['item-'.$v['id']]['detail_number']['item-'.$v['detail_id']] = $v['number'];
                    $key = 'item-'.$v['id'];
                }
                $order_specifications = $temp;
            }
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '添加订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '添加订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $order_specifications[$key];
            $this->response['key'] = $key;
        } else {
            $model->rollback();
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxEditSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $specifications_id = I('id');
        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }

        $weight = floatval(I('weight'));
        $length = floatval(I('length'));
        $width = floatval(I('width'));
        $height = floatval(I('height'));
        $count = floatval(I('count'));
        $remark = trim(I('remark'));
        $detail = $_POST['detail'];

        $has_error = false;
        $error_msg = '';

        if( $weight <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入重量' : '请输入重量';
        }

        if( $length <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入长度' : '请输入长度';
        }

        if( $width <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入宽度' : '请输入宽度';
        }

        if( $height <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入高度' : '请输入高度';
        }

        if( !is_array($detail) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品' : '请输入商品';
        } else {
            foreach( $detail as $k => $v ) {
                $v['detail_number'] = intval($v['detail_number']);
                $map = ['id' => $v['detail_id'], 'order_id' => $order_id];
                if( !M('ClientOrderDetail')->where($map)->find() || $v['detail_number'] <= 0 ) {
                    $has_error = true;
                    $error_msg = $error_msg ? $error_msg.'<br />请输入商品以及每箱数量' : '请输入商品以及每箱数量';
                    break;
                }
            }
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入箱数' : '请输入箱数';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        $model = new Model;
        $model->startTrans();
        $transaction = true;

        $data = [
            'weight' => $weight,
            'length' => $length,
            'width' => $width,
            'height' => $height,
            'count' => $count,
            'remark' => $remark,
        ];

        $result = M('ClientOrderSpecifications')->where(['order_id' => $order_id, 'id' => $specifications_id])->save($data);
        if( !is_numeric($result) ) {
            $transaction = false;
        }

        if( $transaction ) {
            $result = M('ClientOrderMap')->where(['specifications_id' => $specifications_id])->delete();
            if( !$result ) {
                $transaction = false;
            }
        }

        if( $transaction ) {
            foreach( $detail as $k => $v ) {
                $map_data = [
                    'detail_id' => $v['detail_id'],
                    'specifications_id' => $specifications_id,
                    'number' => $v['detail_number'],
                ];
                $result = M('ClientOrderMap')->add($map_data);
                if( !$result ) {
                    $transaction = false;
                    break;
                }
            }
        }

        if( $transaction ) {
            $model->commit();

            $order_specifications = M('ClientOrderSpecifications')
                ->alias('s')
                ->field('s.*, m.detail_id, m.number')
                ->join('inner join hx_client_order_map as m on m.specifications_id = s.id')
                ->where(['s.id' => $specifications_id])
                ->select();
            $key = '';
            if( $order_specifications ) {
                $temp = [];
                foreach( $order_specifications as $k => $v ) {
                    if( !isset($temp['item-'.$v['id']]) ) {
                        $temp['item-'.$v['id']] = $v;
                    }
                    $temp['item-'.$v['id']]['detail'][] = 'item-'.$v['detail_id'];
                    $temp['item-'.$v['id']]['detail_number']['item-'.$v['detail_id']] = $v['number'];
                    $key = 'item-'.$v['id'];
                }
                $order_specifications = $temp;
            }

            $data['order_id'] = $order_id;
            $data['order_num'] = $order['order_num'];
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '编辑订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '编辑订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $order_specifications[$key];
            $this->response['key'] = $key;
        } else {
            $model->rollback();
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxDeleteSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $specifications_id = I('id');
        $order_id = I('order_id');
        $index = I('index');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $temp = M('ClientOrderSpecifications')->where(['order_id' => $order_id])->select();
        $remain_count = count($temp);
        if( $remain_count <= 1 ) {
            $this->response['msg'] = '至少保留一项订单规格';
            echo json_encode($this->response);
            exit;
        }
        $model = new Model;
        $model->startTrans();
        $transaction = true;

        $result = M('ClientOrderSpecifications')->where(['order_id' => $order_id, 'id' => $specifications_id])->delete();
        if( !$result ) {
            $transaction = false;
        }
        if( $transaction ) {
            $result = M('ClientOrderMap')->where(['specifications_id' => $specifications_id])->delete();
            if( !$result ) {
                $transaction = false;
            }
        }

        if( $transaction ) {
            $model->commit();
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '删除订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '删除订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data']['index'] = $index;
        } else {
            $model->rollback();
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function detail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();

        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order_detail[$k]["detail_goods_code"] = $v["goods_code"];
                unset($order_detail[$k]["goods_code"]);
                $order_detail[$k]["detail_count"] = $v["count"];
                unset($order_detail[$k]["count"]);
            }
        }
        $order_specifications = M('ClientOrderSpecifications')
            ->alias('s')
            ->field('s.*, m.detail_id, m.number, cd.product_name, cd.en_product_name, cd.unit, cd.goods_code, cd.origin')
            ->join('inner join hx_client_order_map as m on m.specifications_id = s.id')
            ->join('left join hx_client_order_detail as cd on m.detail_id = cd.id')
            ->where(['s.order_num' => $order['order_num']])
            ->select();
//        echo M('ClientOrderSpecifications')->getLastSql();exit;
        $s_cursor = 0;
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                if( !isset($temp[$v['id']]) ) {
                    $temp[$v['id']] = $v;
                }
                $temp[$v['id']]['cargo'][] = [
                    'detail_id' => $v['detail_id'],
                    'specifications_id' => $v['id'],
                    'product_name' => $v['product_name'],
                    'en_product_name' => $v['en_product_name'],
                    'detail_goods_code' => $v['goods_code'],
                    'origin' => $v['origin'],
                    'product_count' => $v['number'],
                ];
                $last_index = count($temp[$v['id']]['cargo']) - 1;
                foreach( $order_detail as $key => $d ) {
                    if( $d['id'] == $v['detail_id'] ) {
                        $temp[$v['id']]['cargo'][$last_index]['product_index'] = $key;
                    }
                }
            }
            $order_specifications = $temp;
            $temp = [];
            $start = 1;
            foreach( $order_specifications as $v ) {
                $v['index'] = $v['id'];
                $end = $start + $v['count'] - 1;
                $v['id'] = $start ."-". $end;
                $start = $start + $v['count'];
                $v['rate'] = $v['length'] * $v['width'] * $v['height'] / 5000;
                $temp[] = $v;
            }
            $order_specifications = $temp;
        }

        $order_fee = M('ClientOrderFee')->where(['order_id' => $id])->find();

        $this->assign('order', $order);
        $this->assign('order_detail', json_encode($order_detail));
        $this->assign('order_specifications', json_encode($order_specifications));
        $this->assign('order_fee', $order_fee);
        $this->assign('settlement_method', C('settlement_method'));
        $this->display();
    }

    public function commit() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }

        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单无法提交';
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'client_status' => 1,
            'commit_time' => date('Y-m-d H:i:s', time()),
        ];
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->save($data);
        if( is_numeric($result) ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '提交订单',
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '提交订单成功';
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;


    }

    public function reject() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        $message_List = M('ClientOrderMessage')->where(['user_id' => $client_id, 'order_id' => $id])
            ->order('status desc, created_at desc')
            ->select();
        $this->response['data'] = $message_List;
        $this->response['code'] = 1;
        echo json_encode($this->response);
        exit;
    }

    public function trace() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['express_status'] == 0 ) {
            $this->response['msg'] = '订单未发出';
            echo json_encode($this->response);
            exit;
        }

        if( $order['self_express'] == 0 ) {

            $trace_result = S('hkwcd_trace_result_' . $order['order_num']);
            if (!$trace_result) {
                $trace_result = query_express($order['express_type'], $order['express_order_num']);
                S('hkwcd_trace_result_' . $order['order_number'], $trace_result, 7200);
            }

            $trace_result_array = json_decode($trace_result, true);
            if ($trace_result_array['message'] == 'ok') {
                $this->response['code'] = 1;
                $this->response['data'] = $trace_result_array;
                $this->response['msg'] = '查询成功';
            } else {
                $this->response['msg'] = '抱歉，暂无查询记录';
                $this->response['data'] = [];
            }
        } else {
            $trace_result = M("ClientOrderSelfExpress")->where(['order_id' => $id])->order("id desc")->select();
            if( $trace_result ) {
                $result["message"] = "ok";
                $temp = [];
                foreach( $trace_result as $v ) {
                    $temp[] = [
                        "time" => $v["time"],
                        "context" => $v["content"],
                    ];
                }
                $result["data"] = $temp;
                $this->response['code'] = 1;
                $this->response['data'] = $result;
                $this->response['msg'] = '查询成功';
            } else {
                $this->response['msg'] = '抱歉，暂无查询记录';
                $this->response['data'] = [];
            }
        }
        echo json_encode($this->response);
        exit;
    }

    public function delete() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( $order['client_status'] != 0 ) {
            $this->error('当前订单无法删除');
        }
        //软删除
//        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->delete();
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->save(['status' => 0]);
        if( is_numeric($result) ) {
//            M('ClientOrderDetail')->where(['order_id' => $id])->delete();
//            M('ClientOrderSpecifications')->where(['order_id' => $id])->delete();
            $this->response['code'] = 1;
            $this->response['msg'] = '成功删除订单 '.$order['order_num'];
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ensure() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');

        }
        if( !($order['exam_status'] == 1 && $order['ensure_status'] == 0 ) ) {
            $this->error('当前订单不是待确认状态');
        }
        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();

        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order_detail[$k]["detail_goods_code"] = $v["goods_code"];
                unset($order_detail[$k]["goods_code"]);
                $order_detail[$k]["detail_count"] = $v["count"];
                unset($order_detail[$k]["count"]);
            }
        }
        $order_specifications = M('ClientOrderSpecifications')
            ->alias('s')
            ->field('s.*, m.detail_id, m.number, cd.product_name, cd.en_product_name, cd.unit, cd.goods_code, cd.origin')
            ->join('inner join hx_client_order_map as m on m.specifications_id = s.id')
            ->join('left join hx_client_order_detail as cd on m.detail_id = cd.id')
            ->where(['s.order_num' => $order['order_num']])
            ->select();
//        echo M('ClientOrderSpecifications')->getLastSql();exit;
        $s_cursor = 0;
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                if( !isset($temp[$v['id']]) ) {
                    $temp[$v['id']] = $v;
                }
                $temp[$v['id']]['cargo'][] = [
                    'detail_id' => $v['detail_id'],
                    'specifications_id' => $v['id'],
                    'product_name' => $v['product_name'],
                    'en_product_name' => $v['en_product_name'],
                    'detail_goods_code' => $v['goods_code'],
                    'origin' => $v['origin'],
                    'product_count' => $v['number'],
                ];
                $last_index = count($temp[$v['id']]['cargo']) - 1;
                foreach( $order_detail as $key => $d ) {
                    if( $d['id'] == $v['detail_id'] ) {
                        $temp[$v['id']]['cargo'][$last_index]['product_index'] = $key;
                    }
                }
            }
            $order_specifications = $temp;
            $temp = [];
            $start = 1;
            foreach( $order_specifications as $v ) {
                $v['index'] = $v['id'];
                $end = $start + $v['count'] - 1;
                $v['id'] = $start ."-". $end;
                $start = $start + $v['count'];
                $v['rate'] = $v['length'] * $v['width'] * $v['height'] / 5000;
                $temp[] = $v;
            }
            $order_specifications = $temp;
        }

        $order_fee = M('ClientOrderFee')->where(['order_id' => $id])->find();


        $this->assign('order', $order);
        $this->assign('order_detail', json_encode($order_detail));
        $this->assign('order_specifications', json_encode($order_specifications));
        $this->assign('order_fee', $order_fee);
        $this->assign('settlement_method', C('settlement_method'));

        $this->title = '确认订单';
        $this->display();
    }

    public function doEnsure() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( !($order['client_status'] == 1 && $order['exam_status'] == 1 && $order['ensure_status'] == 0 ) ) {
            $this->response['msg'] = '当前订单不是待确认状态';
            echo json_encode($this->response);
            exit;
        }

        $autograph = I('autograph', '', 'trim');
        if( empty($autograph) ) {
            $this->response['msg'] = '请签名';
            echo json_encode($this->response);
            exit;
        }

        $data = [
            'ensure_status' => 1,
            'autograph' => $autograph,
        ];
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])
            ->save($data);
        if( is_numeric($result) ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '确认发货，签名：'.$autograph,
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '确认发货成功';
            $this->response['url'] = U('Order/detail', ['id' => $id]);
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function complete() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( !($order['express_status'] == 1 && $order['receive_status'] == 0 ) ) {
            $this->response['msg'] = '当前订单不是待收货状态';
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'receive_status' => 1,
        ];
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])
            ->save($data);
        if( is_numeric($result) ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '订单完成',
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '订单完成';
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    //发票
    public function invoice() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $this->assign('client', $client);
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( !($order['express_status'] == 1) ) {
            $this->error('当前订单不能打印装箱单');
        }
        $order['express_time'] = date('Y-m-d', strtotime($order['express_time']));
        $country = M('Country')->where(['id' => $order['receive_country_id']])->find();
        $order['country_name'] = $country['name'];
        $order['country_ename'] = $country['ename'];

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();
//        $order_specifications = M('ClientOrderSpecifications')->where(['order_num' => $order['order_num']])->select();
//        $order['total_box_num'] = 0;
//        $order['total_weight'] = 0;
        $order['total_declared'] = 0;
        $order_detail_remain =  [];
        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order_detail[$k]['declared'] = $v['single_declared'] * $v['count'];
//                $order['total_box_num'] += $v['box'];
//                $order['total_weight'] += $v['cubic_of_volume'] > $v['weighting_weight'] ? $v['cubic_of_volume'] : $v['weighting_weight'];
                $order['total_declared'] += $order_detail[$k]['declared'];
                $order_detail[$k]['declared'] = sprintf('%.2f', $order_detail[$k]['declared']);
                $order_detail[$k]['single_declared'] = sprintf('%.2f', $order_detail[$k]['single_declared']);
            }
        }
        $order['total_declared'] = sprintf('%.2f', $order['total_declared']);
        for( $i = 0; $i < 4 - count($order_detail); $i++ ) {
            $order_detail_remain[] = [];
        }

        $order_specifications = M('ClientOrderSpecifications')
            ->alias('s')
            ->field('s.*, m.detail_id,m.number, d.product_name, d.en_product_name, d.unit, d.origin, d.goods_code')
            ->join('left join hx_client_order_map as m on m.specifications_id = s.id')
            ->join('left join hx_client_order_detail as d on d.id = m.detail_id')
            ->where(['s.order_num' => $order['order_num']])
            ->select();
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                if( !isset($temp['item-'.$v['id']]) ) {
                    $temp['item-'.$v['id']] = $v;
                }
                $temp['item-'.$v['id']]['detail'][] = [
                    'product_name' => $v['product_name'],
                    'en_product_name' => $v['en_product_name'],
                    'unit' => $v['unit'],
                    'number' => $v['number'],
                    'origin' => $v['origin'],
                    'goods_code' => $v['goods_code'],
                ];
            }
            $order_specifications = $temp;
        }
        $order['specifications_total_weight'] = 0;
        $order['specifications_total_rate'] = 0;
        $order['specifications_calculate_weight'] = 0;
        $order['specifications_total_count'] = 0;
        if( $order_specifications ) {
            $start = 1;
            $real_start = 1;
            foreach( $order_specifications as $k => $v ) {
                $end = $start + $v['count'] - 1;
                $order_specifications[$k]['no'] = $start.'-'.$end;
                $order_specifications[$k]['weight'] = sprintf('%.2f', $v['weight']);
                $order_specifications[$k]['length'] = sprintf('%.2f', $v['length']);
                $order_specifications[$k]['width'] = sprintf('%.2f', $v['width']);
                $order_specifications[$k]['height'] = sprintf('%.2f', $v['height']);
                $order_specifications[$k]['rate'] = ($v['height'] * $v['length'] * $v['width'] / 5000);
                $order_specifications[$k]['calculate_weight'] = $v['weight'] > $order_specifications[$k]['rate'] ? $v['weight'] : $order_specifications[$k]['rate'];
                $order['specifications_total_weight'] += $v['weight'] * $v['count'];
                $order['specifications_total_rate'] += $order_specifications[$k]['rate'] * $v['count'];
                $order['specifications_total_count'] += $v['count'];
                $order['specifications_calculate_weight'] += $order_specifications[$k]['calculate_weight'] * $v['count'];
                $order_specifications[$k]['rowspan'] = count($v['detail']);
                $start = $end + 1;
                //real
                $real_end = $real_start + $v['real_count'] - 1;
                $order_specifications[$k]['real_no'] = $real_start.'-'.$real_end;
                $order_specifications[$k]['real_weight'] = sprintf('%.2f', $v['real_weight']);
                $order_specifications[$k]['real_length'] = sprintf('%.2f', $v['real_length']);
                $order_specifications[$k]['real_width'] = sprintf('%.2f', $v['real_width']);
                $order_specifications[$k]['real_height'] = sprintf('%.2f', $v['real_height']);
                $order_specifications[$k]['real_rate'] = ($v['real_height'] * $v['real_length'] * $v['real_width'] / 5000);
                $order_specifications[$k]['real_calculate_weight'] = $v['real_weight'] > $order_specifications[$k]['real_rate'] ? $v['real_weight'] : $order_specifications[$k]['real_rate'];
                $order['real_specifications_total_weight'] += $v['real_weight'] * $v['real_count'];
                $order['real_specifications_total_rate'] += $order_specifications[$k]['real_rate'] * $v['real_count'];
                $order['real_specifications_total_count'] += $v['real_count'];
                $order['real_specifications_calculate_weight'] += $order_specifications[$k]['real_calculate_weight'] * $v['real_count'];
                $order_specifications[$k]['rowspan'] = count($v['detail']);
                $real_start = $real_end + 1;
            }
        }

        $order["mode_of_transportation"] = str_replace("From ", "From: ", $order["mode_of_transportation"]);
        $order["mode_of_transportation"] = str_replace("to ", "To: ", $order["mode_of_transportation"]);


        $this->assign('order', $order);
        $this->assign('order_detail', $order_detail);
        $this->assign('order_detail_remain', $order_detail_remain);
        $this->type = '商业发票';
        $this->assign("is_client", 1);
//        $this->display();
        $this->display("./App/Group/Index/Tpl/wcd56/Order_invoice.html");

    }

    //装箱单
    public function packing() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $this->assign('client', $client);

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( !($order['express_status'] == 1) ) {
            $this->error('当前订单不能打印装箱单');
        }
        $order['express_time'] = date('Y-m-d', strtotime($order['express_time']));
        $country = M('Country')->where(['id' => $order['receive_country_id']])->find();
        $order['country_name'] = $country['name'];
        $order['country_ename'] = $country['ename'];


        $order_detail_remain =  [];
        $order_specifications = M('ClientOrderSpecifications')
            ->alias('s')
            ->field('s.*, m.detail_id,m.number, d.product_name, d.en_product_name, d.unit, d.origin, d.goods_code')
            ->join('left join hx_client_order_map as m on m.specifications_id = s.id')
            ->join('left join hx_client_order_detail as d on d.id = m.detail_id')
            ->where(['s.order_num' => $order['order_num']])
            ->select();
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                if( !isset($temp['item-'.$v['id']]) ) {
                    $temp['item-'.$v['id']] = $v;
                }
                $temp['item-'.$v['id']]['detail'][] = [
                    'product_name' => $v['product_name'],
                    'en_product_name' => $v['en_product_name'],
                    'unit' => $v['unit'],
                    'number' => $v['number'],
                    'origin' => $v['origin'],
                    'goods_code' => $v['goods_code'],
                ];
            }
            $order_specifications = $temp;
        }
        $order['specifications_total_weight'] = 0;
        $order['specifications_total_rate'] = 0;
        $order['specifications_calculate_weight'] = 0;
        $order['specifications_total_count'] = 0;
        if( $order_specifications ) {
            $start = 1;
            $real_start = 1;
            foreach( $order_specifications as $k => $v ) {
                $end = $start + $v['count'] - 1;
                $order_specifications[$k]['no'] = $start.'-'.$end;
                $order_specifications[$k]['weight'] = sprintf('%.2f', $v['weight']);
                $order_specifications[$k]['length'] = sprintf('%.2f', $v['length']);
                $order_specifications[$k]['width'] = sprintf('%.2f', $v['width']);
                $order_specifications[$k]['height'] = sprintf('%.2f', $v['height']);
                $order_specifications[$k]['rate'] = ($v['height'] * $v['length'] * $v['width'] / 5000);
                $order_specifications[$k]['calculate_weight'] = $v['weight'] > $order_specifications[$k]['rate'] ? $v['weight'] : $order_specifications[$k]['rate'];
                $order['specifications_total_weight'] += $v['weight'] * $v['count'];
                $order['specifications_total_rate'] += $order_specifications[$k]['rate'] * $v['count'];
                $order['specifications_total_count'] += $v['count'];
                $order['specifications_calculate_weight'] += $order_specifications[$k]['calculate_weight'] * $v['count'];
                $order_specifications[$k]['rowspan'] = count($v['detail']);
                $start = $end + 1;
                //real
                $real_end = $real_start + $v['real_count'] - 1;
                $order_specifications[$k]['real_no'] = $real_start.'-'.$real_end;
                $order_specifications[$k]['real_weight'] = sprintf('%.2f', $v['real_weight']);
                $order_specifications[$k]['real_length'] = sprintf('%.2f', $v['real_length']);
                $order_specifications[$k]['real_width'] = sprintf('%.2f', $v['real_width']);
                $order_specifications[$k]['real_height'] = sprintf('%.2f', $v['real_height']);
                $order_specifications[$k]['real_rate'] = ($v['real_height'] * $v['real_length'] * $v['real_width'] / 5000);
                $order_specifications[$k]['real_calculate_weight'] = $v['real_weight'] > $order_specifications[$k]['real_rate'] ? $v['real_weight'] : $order_specifications[$k]['real_rate'];
                $order['real_specifications_total_weight'] += $v['real_weight'] * $v['real_count'];
                $order['real_specifications_total_rate'] += $order_specifications[$k]['real_rate'] * $v['real_count'];
                $order['real_specifications_total_count'] += $v['real_count'];
                $order['real_specifications_calculate_weight'] += $order_specifications[$k]['real_calculate_weight'] * $v['real_count'];
                $order_specifications[$k]['rowspan'] = count($v['detail']);
                $real_start = $real_end + 1;
            }
        }
        for( $i = 0; $i < 4 - count($order_specifications); $i++ ) {
            $order_detail_remain[] = [];
        }

        $order["mode_of_transportation"] = str_replace("From ", "From: ", $order["mode_of_transportation"]);
        $order["mode_of_transportation"] = str_replace("to ", "To: ", $order["mode_of_transportation"]);

//        var_dump($order_specifications['detail']);exit;
        $this->assign("is_client", 1);
        $this->assign('order', $order);
        $this->assign('order_specifications', $order_specifications);
        $this->assign('order_detail_remain', $order_detail_remain);
        $this->type = '装箱单';
        $this->display("./App/Group/Index/Tpl/wcd56/Order_packing.html");
    }

    //交接清单
    public function transfer() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $this->assign('client', $client);

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( !($order['express_status'] == 1) ) {
            $this->error('当前订单不能打印交接清单');
        }

        $order_fee = M('ClientOrderFee')->where(['order_id' => $order['id']])->find();

        $today_time = strtotime(date('Y-m-d', strtotime($order['add_time'])));
        $tomorrow_time = $today_time + 3600 * 24;
        $start_time = date('Y-m-d H:i:s', $today_time);
        $end_time = date('Y-m-d H:i:s', $tomorrow_time);
        $map = [
            "client_id" => $this->client_id,
            'add_time' => ['between', [$start_time, $end_time]],
            'express_status' => 1,
        ];

        $client = M('Client')->where(['id' => $order['client_id']])->find();

        $order_package_total_count = 0;     //包裹数量
        $order_document_total_count = 0;    //文件数量
        $order_total_count = 0;             //总箱数
        $order_num_list = [];
        $order_list = M('ClientOrder')->where($map)->select();
        if( $order_list ) {
            foreach( $order_list as $k => $v ) {
                if( $v['package_type'] == 1 ) {
                    $order_document_total_count++;
                }
                if( $v['package_type'] == 2 ) {
                    $order_package_total_count++;
                }
                $order_list[$k]["total_count"] = M("ClientOrderSpecifications")
                    ->where(["order_num" => $v["order_num"]])
                    ->sum("real_count");
                $s_list = M("ClientOrderSpecifications")->where(["order_num" => $v["order_num"]])
                    ->select();
                $temp_weight = 0;
                $temp_rate = 0;
                foreach( $s_list as $s ) {
                    $temp_weight += $s["real_weight"] * $s["real_count"];
                    $temp_rate += sprintf("%.2f", ($s["real_length"] * $s["real_width"] * $s["real_height"] * $s["real_count"] / 5000));
                }
                $order_list[$k]["total_weight"] = $temp_weight;
                $order_list[$k]["total_rate"] = $temp_rate;
                $order_list[$k]["delivery_weight"] = $temp_weight > $temp_rate ? $temp_weight : $temp_rate;

                $order_num_list[] = $v["order_num"];
            }
            if( $order_num_list ) {
                $order_total_count = M("ClientOrderSpecifications")
                    ->where(["order_num" => ["IN", $order_num_list]])
                    ->sum("real_count");
            }
        }

        $order_count = count($order_list);
        $detail_end = $order_count > 3 ? $order_count : 3;

        $this->assign('order_fee', $order_fee);
        $this->assign('client', $client);
        $this->assign('order_list', $order_list);
        $this->assign('order_count', $order_count);
        $this->assign('detail_start', $order_count);
        $this->assign('detail_end', $detail_end);
        $this->assign('order_total_count', $order_total_count);
        $this->assign('order_package_total_count', $order_package_total_count);
        $this->assign('order_document_total_count', $order_document_total_count);
        $this->display("./App/Group/Manage/Tpl/Clientorder_transfer.html");
    }

    public function getDeliveryList() {
        $client_id = $client_id = session('hkwcd_user.user_id');
        $where = [
            'client_id' => $client_id,
            'status' => 1,
        ];
        $delivery_list = M('DeliveryAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where($where)
            ->order('is_default desc, id asc')
            ->select();
        if( $delivery_list ) {
            $temp = [];
            foreach($delivery_list as $k => $v) {
                if( mb_strlen($v['detail_address']) > 20 ) {
                    $v['show_detail_address'] = mb_substr($v['detail_address'], 0, 20).'...';
                } else {
                    $v['show_detail_address'] = $v['detail_address'];
                }
                $temp[] = $v;
            }
            $delivery_list = $temp;
        }
        $this->response['code'] = 1;
        $this->response['msg'] = 'success';
        $this->response['data'] = empty($delivery_list) ? [] : $delivery_list;
        $this->response['total'] = empty($delivery_list) ? 0 : count($delivery_list);
//        var_dump($this->response);exit;
        echo json_encode($this->response);exit;
    }

    public function getReceiveList() {
        $client_id = $client_id = session('hkwcd_user.user_id');
        $where = [
            'client_id' => $client_id,
            'status' => 1,
        ];
        $receive_list = M('ReceiveAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where($where)
            ->order('is_default desc, id asc')
            ->select();
//        var_dump($receive_list);exit;
        if( $receive_list ) {
            $temp = [];
            foreach($receive_list as $k => $v) {
                if( mb_strlen($v['detail_address']) > 20 ) {
                    $v['show_detail_address'] = mb_substr($v['detail_address'], 0, 20).'...';
                } else {
                    $v['show_detail_address'] = $v['detail_address'];
                }
                $temp[] = $v;
            }
            $receive_list = $temp;
        }
        $this->response['code'] = 1;
        $this->response['msg'] = 'success';
        $this->response['data'] = empty($receive_list) ? [] : $receive_list;
        echo json_encode($this->response);
        exit;

    }

    public function getDefaultDelivery() {
        $client_id = session('hkwcd_user.user_id');
        $default_delivery = M('DeliveryAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where(['client_id' => $client_id, 'status' => 1, 'is_default' => 1])
            ->find();
        if( empty($default_delivery) ) {
            $this->response['code'] = -1;
            $this->response['msg'] = '您没有设置默认的发货地址';
        } else {
            if( mb_strlen($default_delivery['detail_address']) > 20 ) {
                $default_delivery['show_detail_address'] = mb_substr($default_delivery['detail_address'], 0, 20).'...';
            } else {
                $default_delivery['show_detail_address'] = $default_delivery['detail_address'];
            }
            $this->response['code'] = 1;
            $this->response['msg'] = 'success';
            $this->response['data'] = $default_delivery;
        }
        echo json_encode($this->response);
        exit;
    }

    public function getDefaultReceive() {
        $client_id = session('hkwcd_user.user_id');

        $default_receive = M('ReceiveAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where(['client_id' => $client_id, 'status' => 1, 'is_default' => 1])
            ->find();
        if( empty($default_receive) ) {
            $this->response['code'] = -1;
            $this->response['msg'] = '您没有设置默认的收货地址';
        } else {
            if( mb_strlen($default_receive['detail_address']) > 20 ) {
                $default_receive['show_detail_address'] = mb_substr($default_receive['detail_address'], 0, 20).'...';
            } else {
                $default_receive['show_detail_address'] = $default_receive['detail_address'];
            }
            $this->response['code'] = 1;
            $this->response['msg'] = 'success';
            $this->response['data'] = $default_receive;
        }
        echo json_encode($this->response);
        exit;
    }

    public function show_remark() {
        $client_id = session('hkwcd_user.user_id');
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
        } else {
            $this->response['code'] = 1;
            $this->response['data'] = $order['operate_remark'];
        }
        echo json_encode($this->response);
        exit;

    }

    private function _total_to_str($total) {
        $temp_total = '000'.$total;
        $length = strlen($temp_total);
        $number = '';
        switch($length) {
            case 4: $number = $temp_total;break;
            case 5: $number = '000'.$total;break;
            case 6: $number = '00'.$total;break;
            case 7: $number = '0'.$total;break;
            case 8: $number = $total;break;
        }
        return $number;
    }

}