<?php
/**
 * Created by PhpStorm.
 * User: Wrh
 * Date: 2016/11/15
 * Time: 18:15
 */

class OrderAction extends BaseAction  {

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

    }


    public function index() {
        $client_id = session('hkwcd_user.user_id');

        $where = [
            'status' => 1,
            'client_id' => $client_id,
        ];
        //分页
        import('ORG.Util.Page');
        $count = M('ClientOrder')->where($where)->count();

        $page = new Page($count, C('usercenter_page_count'));
        $limit = $page->firstRow. ',' .$page->listRows;

        $order_list = M('ClientOrder')->where($where)->limit($limit)->order('id desc')->select();
        if( $order_list ) {
            foreach( $order_list as $k => $v ) {
                $order_list[$k]['status_str'] = $this->_order_status($v);
            }
        }
        $this->page = $page->show();
        $this->assign('order_list', $order_list);
        $this->assign('title', '订单列表');
        $this->display();
    }

    public function add() {

        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['id'  => $client_id])->find();

        $default_delivery = M('DeliveryAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_delivery = $default_delivery ? 1 : 0;
        $selected_delivery_id = $default_delivery ? $default_delivery['id'] : 0;

        $default_receive = M('ReceiveAddress')->where(['status' => 1, 'is_default' => 1])->find();
        $has_default_receive = $default_receive ? 1 : 0;
        $selected_receive_id = $default_receive ? $default_receive['id'] : 0;

        //国家
        $where = array('pid' => 0,'types'=>0);
        $country_list = M('country')->where($where)->order('sort,id')->select();
        $this->assign('country_list', $country_list);


        $channel_list = M('Channel')->where($where)->select();
        $this->assign('channel_list', $channel_list);

        $this->assign('client', $client);

        $this->assign('default_delivery', $default_delivery);
        $this->assign('json_delivery', json_encode($default_delivery));
        $this->assign('default_delivery_id', $selected_delivery_id);
        $this->assign('has_default_delivery', $has_default_delivery);

        $this->assign('default_receive', $default_receive);
        $this->assign('json_receive', json_encode($default_receive));
        $this->assign('default_receive_id', $selected_receive_id);
        $this->assign('has_default_receive', $has_default_receive);
        if( empty($client['company']) ) {
            $this->assign('default_company', json_encode(''));
        } else {
            $this->assign('default_company', json_encode($client['company']));
        }

        $this->assign('title', '添加订单');

        $this->display();
    }

    public function ajaxAdd() {

        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $has_error = false;
        $error_msg = '';

        $delivery_id = I('post.delivery_id', 0, 'intval');
        $receive_id = I('post.receive_id', 0, 'intval');
        $spare_addressee = I('post.spare_receive_addressee', '', 'trim');
        $spare_detail_address = I('post.spare_receive_detail_address', '', 'trim');
        $spare_mobile = I('post.spare_receive_mobile', '', 'trim');
        $spare_phone = I('post.spare_receive_phone', '', 'trim');
        $spare_postal_code = I('post.spare_receive_postal_code', '', 'trim');
        $currency_id = I('post.currency', 1, 'intval');
        $declared_value = I('post.declared_value', 0, 'floatval');
        $receiver_code = I('post.receiver_code', '', 'trim');
        $channel_id = I('post.channel', 0, 'intval');
        $package_type = I('post.package_type', 0, 'intval');
        $price_terms = I('post.price_terms', '', 'trim');
        $tariff_payment = I('post.tariff_payment', '', 'trim');
        $export_nature = I('post.export_nature', '', 'trim');
        $export_reason = I('post.export_reason', '', 'trim');
        $remark = I('post.remark', '', 'trim');
        $commit = I('post.commit', 0, 'intval');

        $commit = $commit == 1 ? 1 : 0;

        $order_detail = $_POST['order_detail'];
        $order_specifications = $_POST['order_specifications'];

        //构造发货数据
        $where = ['status' => 1, 'client_id' => $client_id, 'id' => $delivery_id];
        $delivery = M('DeliveryAddress')->where($where)->find();
        if( empty($delivery) ) {
            $has_error = true;
            $error_msg = '请输入发货信息';
        } else {
            $data['delivery_id'] = $delivery_id;
            $data['delivery_company'] = $client['company'];
            $data['delivery_consignor'] = $delivery['consignor'];
            $data['delivery_country_id'] = $delivery['country_id'];
            $data['delivery_state'] = $delivery['state'];
            $data['delivery_city'] = $delivery['city'];
            $data['delivery_phone'] = $delivery['phone'];
            $data['delivery_mobile'] = $delivery['mobile'];
            $data['delivery_detail_address'] = $delivery['detail_address'];
            $data['delivery_postal_code'] = $delivery['postal_code'];
        }
        //构造收货数据
        $where = ['status' => 1, 'client_id' => $client_id, 'id' => $receive_id];
        $receive = M('ReceiveAddress')->where($where)->find();
        if( empty($receive) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入发货信息' : '请输入发货信息';
        } else {
            $data['receive_id'] = $receive_id;
            $data['receive_company'] = $client['company'];
            $data['receive_addressee'] = $receive['addressee'];
            $data['receive_country_id'] = $receive['country_id'];
            $data['receive_state'] = $receive['state'];
            $data['receive_city'] = $receive['city'];
            $data['receive_phone'] = $receive['phone'];
            $data['receive_mobile'] = $receive['mobile'];
            $data['receive_detail_address'] = $receive['detail_address'];
            $data['receive_postal_code'] = $receive['postal_code'];
        }
        //构造备用收货数据
        $data['spare_addressee'] = $spare_addressee;
        $data['spare_detail_address'] = $spare_detail_address;
        $data['spare_phone'] = $spare_phone;
        $data['spare_mobile'] = $spare_mobile;
        $data['spare_postal_code'] = $spare_postal_code;

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        //构造其他信息
        $currency = M('Currency')->where(['status' => 1, 'id' => $currency_id])->find();
        if( empty($currency) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择币种' : '请选择币种';
        }
        $data['currency_id'] = $currency_id;
        $data['currency_name'] = $currency['name'];
        $data['currency_rate'] = $currency['rate'];

        $data['declared_value'] = $declared_value;

        if( empty($receiver_code) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入进口商代码' : '请输入进口商代码';
        }
        $data['receiver_code'] = $receiver_code;

        $channel = M('Channel')->where(['status' => 1, 'id' => $channel_id])->find();
        if( empty($channel) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择渠道' : '请选择渠道';
        }
        $data['channel_name'] = $channel['name'].'/'.$channel['en_name'];

        $data['package_type'] = $package_type;

        $price_terms_array = ['FOB', 'CIF', 'WCB'];
        if( !in_array($price_terms, $price_terms_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择价格条款' : '请选择价格条款';
        }
        $data['price_terms'] = $price_terms;


        $tariff_payment_array = ['Receiver', 'Consignor'];
        if( !in_array($tariff_payment, $tariff_payment_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择关税支付' : '请选择关税支付';
        }
        $data['tariff_payment'] = $tariff_payment;

        $export_nature_array = ['Provisional', 'Forever'];
        if( !in_array($export_nature, $export_nature_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择出口性质' : '请选择出口性质';
        }
        $data['export_nature'] = $export_nature;

        if( empty($export_reason) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入出口原因' : '请输入出口原因';
        }
        $data['export_reason'] = $export_reason;
        $data['remark'] = $remark;

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        //构造产品详情
        if( !is_array($order_detail) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入产品详情' : '请输入产品详情';
        } else {
            if( count($order_detail) < 1 ) {
                $has_error = true;
                $error_msg = $error_msg ? $error_msg.'<br />请输入产品详情' : '请输入产品详情';
            } else {
                foreach ($order_detail as $k => $v) {
                    $order_detail[$k]['product_name'] = isset($v['product_name']) ? $v['product_name'] : '';
                    $order_detail[$k]['goods_code'] = isset($v['goods_code']) ? $v['goods_code'] : '';
                    $order_detail[$k]['count'] = isset($v['count']) ? $v['count'] : 0;
                    $order_detail[$k]['single_declared'] = isset($v['single_declared']) ? $v['single_declared'] : 0;
                    $order_detail[$k]['declared'] = isset($v['declared']) ? $v['declared'] : 0;
                    $order_detail[$k]['origin'] = isset($v['origin']) ? $v['origin'] : 'China';
                }
                foreach( $order_detail as $k => $v ) {
                    if( $v['product_name'] == '' || $v['goods_code'] == '' || $v['count'] <= 0 || $v['single_declared'] <= 0 || $v['declared'] <= 0) {
                        $has_error = true;
                        $error_msg = $error_msg ? $error_msg.'<br />产品详情内容有误，请重新输入' : '产品详情内容有误，请重新输入';
                        break;
                    }
                }
            }
        }
        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        //构造产品规格
        if( !is_array($order_specifications) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入产品规格' : '请输入产品规格';
        } else {
            if (count($order_specifications) < 1) {
                $has_error = true;
                $error_msg = $error_msg ? $error_msg . '<br />请输入产品规格' : '请输入产品规格';
            } else {
                foreach( $order_specifications as $k => $v ) {
                    $order_specifications[$k]['count'] = intval($v['count']);
                    $order_specifications[$k]['weight'] = floatval($v['weight']);
                    $order_specifications[$k]['length'] = floatval($v['length']);
                    $order_specifications[$k]['width'] = floatval($v['width']);
                    $order_specifications[$k]['height'] = floatval($v['height']);
                    $order_specifications[$k]['remark'] = trim($v['remark']);
                }
                foreach( $order_specifications as $k => $v ) {
                    if( $v['weight'] <= 0 || $v['length'] < 0 || $v['width'] < 0 || $v['height'] < 0 || $v['count'] < 0 ) {
                        $has_error = true;
                        $error_msg = $error_msg ? $error_msg.'<br />产品规格内容有误，请重新输入' : '产品规格内容有误，请重新输入';
                        break;
                    }
                }
            }
        }
        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        $data['client_status'] = $commit == 0 ? 0 : 1;
        $msg = $commit == 0 ? '添加订单成功' : '订单添加成功，并已提交';
        if( $commit == 1 ) {
            $time = time();
            $data['commit_time'] = date('Y-m-d H:i:s', $time);
            $data['add_time'] = date('Y-m-d H:i:s', $time);
        }
        $data['client_id'] = $client_id;

        //事务开始，插入订单
        $model = new Model();
        $transaction = true;
        $model->startTrans();

        /**
         * 1、插入订单，返回订单编号
         * 2、插入订单详情，
         * 3、插入订单规格
         */
        $order_id = 0;
        $order_num = 'HD'.date('Ymd', time()).$client_id.rand(1000, 9999);
        $data['order_num'] = $order_num;
        $add_order_result = M('ClientOrder')->add($data);
//        $this->response['msg'] = $order_num;
//        echo json_encode($this->response);exit;
        if( !$add_order_result ) {
            $transaction = false;
        } else {
            $order_id = M('ClientOrder')->getLastInsID();
        }

        if( $transaction ) {
            foreach( $order_detail as $k => $v ) {
                $v['order_num'] = $order_num;
                $v['order_id'] = $order_id;
                $temp_result = M('ClientOrderDetail')->add($v);
                if( !$temp_result ) {
                    $transaction = false;
                    break;
                }
            }
        }

        if( $transaction ) {
            foreach( $order_specifications as $k => $v ) {
                $v['order_num'] = $order_num;
                $v['order_id'] = $order_id;
                $temp_result = M('ClientOrderSpecifications')->add($v);
                if( !$temp_result ) {
                    $transaction = false;
                    break;
                }
            }
        }

        if( $transaction ) {
            $model->commit();
            //插入操作日志
            $log_data = [
                'order_num' => $order_num,
                'order_id' => $order_id,
                'user_id' => $client_id,
                'type' => 1,
                'content' => $msg,
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = $msg;
            $this->response['url'] = U('Order/index');
        } else {
            $model->rollback();
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }


    public function edit() {
        $client_id = session('hkwcd_user.user_id');

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( $order['client_status'] != 0 ) {
            $this->error('当前订单不是可编辑状态');
        }

        $order_detail = M('ClientOrderDetail')->where(['order_id' => $id])->select();
        if( $order_detail ) {
            $temp = [];
            foreach( $order_detail as $k => $v ) {
                $temp['item-'.$k] = $v;
            }
            $order_detail = $temp;
        }
        $order_specifications = M('ClientOrderSpecifications')->where(['order_id' => $id])->select();
        if( $order_specifications ) {
            $temp = [];
            foreach( $order_specifications as $k => $v ) {
                $temp['item-'.$k] = $v;
            }
            $order_specifications = $temp;
        }
        $selected_delivery = M('Delivery')->where(['id' => $order['delivery_id']])->find();
        $selected_receive = M('Receive')->where(['id' => $order['receive_id']])->find();

        //国家
        $where = array('pid' => 0,'types'=>0);
        $country_list = M('country')->where($where)->order('sort,id')->select();
        $this->assign('country_list', $country_list);

        //货币
        $where = ['status' => 1];
        $currency_list = M('Currency')->where($where)->select();
        $this->assign('currency_list', $currency_list);

        $channel_list = M('Channel')->where($where)->select();
        $this->assign('channel_list', $channel_list);

        $this->assign('order', $order);
        $this->assign('order_detail', json_encode($order_detail));
        $this->assign('order_specifications', json_encode($order_specifications));

        $this->assign('has_default_delivery', true);
        $this->assign('has_default_receive', true);
        $this->assign('json_delivery', json_encode($selected_delivery));
        $this->assign('json_receive', json_encode($selected_receive));
        $this->assign('s_cursor', count($order_specifications));
        $this->assign('d_cursor', count($order_detail));

        $this->display();
    }

    public function ajaxEdit() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('order_id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this-d>response);
            exit;
        }

        $has_error = false;
        $error_msg = '';

        $delivery_id = I('post.delivery_id', 0, 'intval');
        $receive_id = I('post.receive_id', 0, 'intval');
        $spare_addressee = I('post.spare_receive_addressee', '', 'trim');
        $spare_detail_address = I('post.spare_receive_detail_address', '', 'trim');
        $spare_mobile = I('post.spare_receive_mobile', '', 'trim');
        $spare_phone = I('post.spare_receive_phone', '', 'trim');
        $spare_postal_code = I('post.spare_receive_postal_code', '', 'trim');
        $currency_id = I('post.currency', 1, 'intval');
        $declared_value = I('post.declared_value', 0, 'floatval');
        $receiver_code = I('post.receiver_code', '', 'trim');
        $channel_id = I('post.channel', 0, 'intval');
        $package_type = I('post.package_type', 0, 'intval');
        $price_terms = I('post.price_terms', '', 'trim');
        $tariff_payment = I('post.tariff_payment', '', 'trim');
        $export_nature = I('post.export_nature', '', 'trim');
        $export_reason = I('post.export_reason', '', 'trim');
        $remark = I('post.remark', '', 'trim');
        $commit = I('post.commit', 0, 'intval');

        $commit = $commit == 1 ? 1 : 0;

        //构造发货数据
        $where = ['status' => 1, 'client_id' => $client_id, 'id' => $delivery_id];
        $delivery = M('DeliveryAddress')->where($where)->find();
        if( empty($delivery) ) {
            $has_error = true;
            $error_msg = '请输入发货信息';
        } else {
            $data['delivery_id'] = $delivery_id;
            $data['delivery_company'] = $client['company'];
            $data['delivery_consignor'] = $delivery['consignor'];
            $data['delivery_country_id'] = $delivery['country_id'];
            $data['delivery_state'] = $delivery['state'];
            $data['delivery_city'] = $delivery['city'];
            $data['delivery_phone'] = $delivery['phone'];
            $data['delivery_mobile'] = $delivery['mobile'];
            $data['delivery_detail_address'] = $delivery['detail_address'];
            $data['delivery_postal_code'] = $delivery['postal_code'];
        }
        //构造收货数据
        $where = ['status' => 1, 'client_id' => $client_id, 'id' => $receive_id];
        $receive = M('ReceiveAddress')->where($where)->find();
        if( empty($receive) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入发货信息' : '请输入发货信息';
        } else {
            $data['receive_id'] = $receive_id;
            $data['receive_company'] = $client['company'];
            $data['receive_addressee'] = $receive['addressee'];
            $data['receive_country_id'] = $receive['country_id'];
            $data['receive_state'] = $receive['state'];
            $data['receive_city'] = $receive['city'];
            $data['receive_phone'] = $receive['phone'];
            $data['receive_mobile'] = $receive['mobile'];
            $data['receive_detail_address'] = $receive['detail_address'];
            $data['receive_postal_code'] = $receive['postal_code'];
        }
        //构造备用收货数据
        $data['spare_addressee'] = $spare_addressee;
        $data['spare_detail_address'] = $spare_detail_address;
        $data['spare_phone'] = $spare_phone;
        $data['spare_mobile'] = $spare_mobile;
        $data['spare_postal_code'] = $spare_postal_code;

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        //构造其他信息
        $currency = M('Currency')->where(['status' => 1, 'id' => $currency_id])->find();
        if( empty($currency) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择币种' : '请选择币种';
        }
        $data['currency_id'] = $currency_id;
        $data['currency_name'] = $currency['name'];
        $data['currency_rate'] = $currency['rate'];

        $data['declared_value'] = $declared_value;
        if( empty($receiver_code) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入进口商代码' : '请输入进口商代码';
        }
        $data['receiver_code'] = $receiver_code;

        $channel = M('Channel')->where(['status' => 1, 'id' => $channel_id])->find();
        if( empty($channel) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择渠道' : '请选择渠道';
        }
        $data['channel_name'] = $channel['name'].'/'.$channel['en_name'];

        $data['package_type'] = $package_type;

        $price_terms_array = ['FOB', 'CIF', 'WCB'];
        if( !in_array($price_terms, $price_terms_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择价格条款' : '请选择价格条款';
        }
        $data['price_terms'] = $price_terms;


        $tariff_payment_array = ['Receiver', 'Consignor'];
        if( !in_array($tariff_payment, $tariff_payment_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择关税支付' : '请选择关税支付';
        }
        $data['tariff_payment'] = $tariff_payment;

        $export_nature_array = ['Provisional', 'Forever'];
        if( !in_array($export_nature, $export_nature_array) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请选择出口性质' : '请选择出口性质';
        }
        $data['export_nature'] = $export_nature;

        if( empty($export_reason) ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入出口原因' : '请输入出口原因';
        }
        $data['export_reason'] = $export_reason;
        $data['remark'] = $remark;

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }
        $data['client_status'] = $commit == 0 ? 0 : 1;
        $msg = $commit == 0 ? '修改订单成功' : '订单修改成功，并已提交';
        if( $commit == 1 ) {
            $time = time();
            $data['commit_time'] = date('Y-m-d H:i:s', $time);
        }
        $data['client_id'] = $client_id;
        //修改订单
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->save($data);
        if( $result ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => $msg,
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = $msg;
            $this->response['url'] = U('Order/index');
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;

    }

    public function ajaxAddDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $has_error = false;
        $error_msg = '';

        $product_name = trim(I('product_name'));
        $goods_code = trim(I('goods_code'));
        $count = intval(I('count'));
        $single_declared = floatval(I('single_declared'));
        $declared = floatval(I('declared'));
        $origin = trim(I('origin'));

        if( $product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入品名' : '请输入品名';
        }

        if( $goods_code == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品编码' : '请输入商品编码';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $single_declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入单件申报价值' : '请输入单件申报价值';
        }

        if( $declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入总申报价值' : '请输入总申报价值';
        }

        if( $origin == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入原产地' : '请输入原产地';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'product_name' => $product_name,
            'goods_code' => $goods_code,
            'count' => $count,
            'single_declared' => $single_declared,
            'declared' => $declared,
            'origin' => $origin,
            'order_id' => $order_id,
            'order_num' => $order['order_num'],
        ];
        $result = M('ClientOrderDetail')->add($data);
        if( $result ) {
            $data['id'] = M('ClientOrderDetail')->getLastInsID();
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '添加订单详情成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '添加订单详情成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxEditDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $detail_id = I('id');
        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $has_error = false;
        $error_msg = '';

        $product_name = trim(I('product_name'));
        $goods_code = trim(I('goods_code'));
        $count = intval(I('count'));
        $single_declared = floatval(I('single_declared'));
        $declared = floatval(I('declared'));
        $origin = trim(I('origin'));

        if( $product_name == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入品名' : '请输入品名';
        }

        if( $goods_code == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入商品编码' : '请输入商品编码';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $single_declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入单件申报价值' : '请输入单件申报价值';
        }

        if( $declared <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入总申报价值' : '请输入总申报价值';
        }

        if( $origin == '' ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入原产地' : '请输入原产地';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'product_name' => $product_name,
            'goods_code' => $goods_code,
            'count' => $count,
            'single_declared' => $single_declared,
            'declared' => $declared,
            'origin' => $origin,
        ];

        $result = M('ClientOrderDetail')->where(['id' => $detail_id, 'order_id' => $order_id])->save($data);
        if( $result ) {
            $data['id'] = $detail_id;
            $data['order_id'] = $order_id;
            $data['order_num'] = $order['order_num'];
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '编辑订单详情成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '编辑订单详情成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;

    }

    public function ajaxDeleteDetail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $detail_id = I('id');
        $order_id = I('order_id');
        $index = I('index');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $temp = M('ClientOrderDetail')->where(['order_id' => $order_id])->select();
        $remain_count = count($temp);
        if( $remain_count <= 1 ) {
            $this->response['msg'] = '至少保留一项订单详情';
            echo json_encode($this->response);
            exit;
        }
        $result = M('ClientOrderDetail')->where(['order_id' => $order_id, 'id' => $detail_id])->delete();
        if( $result ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '删除订单详情成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '删除订单详情成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data']['index'] = $index;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxAddSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }

        $weight = floatval(I('weight'));
        $length = floatval(I('length'));
        $width = floatval(I('width'));
        $height = floatval(I('height'));
        $count = floatval(I('count'));
        $remark = trim(I('remark'));

        $has_error = false;
        $error_msg = '';

        if( $weight <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入重量' : '请输入重量';
        }

        if( $length <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入长度' : '请输入长度';
        }

        if( $width <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入宽度' : '请输入宽度';
        }

        if( $height <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入高度' : '请输入高度';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        $data = [
            'weight' => $weight,
            'length' => $length,
            'width' => $width,
            'height' => $height,
            'count' => $count,
            'remark' => $remark,
            'order_id' => $order_id,
            'order_num' => $order['order_num'],
        ];

        $result = M('ClientOrderSpecifications')->add($data);
        if( $result ) {
            $data['id'] = M('ClientOrderSpecifictions')->getLastInsID();
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '添加订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '添加订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxEditSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $specifications_id = I('id');
        $order_id = I('order_id');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }

        $has_error = false;
        $error_msg = '';

        $weight = floatval(I('weight'));
        $length = floatval(I('length'));
        $width = floatval(I('width'));
        $height = floatval(I('height'));
        $count = floatval(I('count'));
        $remark = trim(I('remark'));

        $has_error = false;
        $error_msg = '';

        if( $weight <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入重量' : '请输入重量';
        }

        if( $length <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入长度' : '请输入长度';
        }

        if( $width <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入宽度' : '请输入宽度';
        }

        if( $height <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入高度' : '请输入高度';
        }

        if( $count <= 0 ) {
            $has_error = true;
            $error_msg = $error_msg ? $error_msg.'<br />请输入数量' : '请输入数量';
        }

        if( $has_error ) {
            $this->response['msg'] = $error_msg;
            echo json_encode($this->response);
            exit;
        }

        $data = [
            'weight' => $weight,
            'length' => $length,
            'width' => $width,
            'height' => $height,
            'count' => $count,
            'remark' => $remark,
        ];

        $result = M('ClientOrderSpecifications')->where(['order_id' => $order_id, 'id' => $specifications_id])->save($data);
        if( $result ) {
            $data['order_id'] = $order_id;
            $data['order_num'] = $order['order_num'];
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '编辑订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '编辑订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data'] = $data;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function ajaxDeleteSpecifications() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $specifications_id = I('id');
        $order_id = I('order_id');
        $index = I('index');

        $order = M('ClientOrder')->where(['id' => $order_id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单不是可编辑状态';
            echo json_encode($this->response);
            exit;
        }
        $temp = M('ClientOrderSpecifications')->where(['order_id' => $order_id])->select();
        $remain_count = count($temp);
        if( $remain_count <= 1 ) {
            $this->response['msg'] = '至少保留一项订单规格';
            echo json_encode($this->response);
            exit;
        }
        $result = M('ClientOrderSpecifications')->where(['order_id' => $order_id, 'id' => $specifications_id])->delete();
        if( $result ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '删除订单规格成功',
            ];
            M('ClientOrderLog')->add($log_data);

            $this->response['code'] = 1;
            $this->response['msg'] = '删除订单规格成功';
            $this->response['url'] = U('Order/edit', ['id' => $order_id]);
            $this->response['data']['index'] = $index;
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function detail() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();
        $order_specifications = M('ClientOrderSpecifications')->where(['order_num' => $order['order_num']])->select();

        $this->assign('order', $order);
        $this->assign('order_detail', json_encode($order_detail));
        $this->assign('order_specifications', json_encode($order_specifications));

        $this->display();
    }

    public function commit() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();

        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }

        if( $order['client_status'] != 0 ) {
            $this->response['msg'] = '当前订单无法提交';
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'client_status' => 1,
            'commit_time' => date('Y-m-d H:i:s', time()),
        ];
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->save($data);
        if( is_numeric($result) ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '提交订单',
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '提交订单成功';
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;


    }

    public function reject() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        $message_List = M('ClientOrderMessage')->where(['user_id' => $client_id, 'order_id' => $id])
            ->order('status desc, created_at desc')
            ->select();
        $this->response['data'] = $message_List;
        $this->response['code'] = 1;
        echo json_encode($this->response);
        exit;
    }

    public function trace() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( $order['express_status'] == 0 ) {
            $this->response['msg'] = '订单未发出';
            echo json_encode($this->response);
            exit;
        }
//        $express_type = M('ExpressType')->where(['id' => $order['express_type_id']])->find();
//        if( empty($express_type) ) {
//            $this->response['msg'] = '运单异常';
//            echo json_encode($this->response);
//            exit;
//        }
        $trace_result = S('hkwcd_trace_result');
        if( !$trace_result ) {
            $trace_result = query_express($order['express_type'], $order['express_order_num']);
            S('hkwcd_trace_result', $trace_result, 7200);
        }

        $trace_result_array = json_decode($trace_result, true);
        if( $trace_result_array['message'] == 'ok' ) {
            $this->response['code'] = 1;
            $this->response['data'] = $trace_result_array;
            $this->response['msg'] = '查询成功';
        } else {
            $this->response['msg'] = '抱歉，暂无查询记录';
            $this->response['data'] = [];
        }
        echo json_encode($this->response);
        exit;
    }

    public function delete() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( $order['client_status'] != 0 ) {
            $this->error('当前订单无法删除');
        }
        //软删除
//        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->delete();
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id])->save(['status' => 0]);
        if( $result ) {
//            M('ClientOrderDetail')->where(['order_id' => $id])->delete();
//            M('ClientOrderSpecifications')->where(['order_id' => $id])->delete();
            $this->response['code'] = 1;
            $this->response['msg'] = '成功删除订单 '.$order['order_num'];
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function complete() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->response['msg'] = '订单不存在';
            echo json_encode($this->response);
            exit;
        }
        if( !($order['express_status'] == 1 && $order['receive_status'] == 0 ) ) {
            $this->response['msg'] = '当前订单不是待收货状态';
            echo json_encode($this->response);
            exit;
        }
        $data = [
            'receive_status' => 1,
        ];
        $result = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])
            ->save($data);
        if( is_numeric($result) ) {
            //插入操作日志
            $log_data = [
                'order_num' => $order['order_num'],
                'order_id' => $order['id'],
                'user_id' => $client_id,
                'type' => 1,
                'content' => '订单完成',
            ];
            M('ClientOrderLog')->add($log_data);
            $this->response['code'] = 1;
            $this->response['msg'] = '订单完成';
        } else {
            $this->response['msg'] = '系统繁忙，请稍后重试';
        }
        echo json_encode($this->response);
        exit;
    }

    public function invoice() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( !($order['express_status'] == 1) ) {
            $this->error('当前订单不能打印装箱单');
        }
        $order['express_time'] = date('Y-m-d', strtotime($order['express_time']));
        $country = M('Country')->where(['id' => $order['receive_country_id']])->find();
        $order['country_name'] = $country['name'];
        $order['country_ename'] = $country['ename'];

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();
//        $order_specifications = M('ClientOrderSpecifications')->where(['order_num' => $order['order_num']])->select();
        $order['total_box_num'] = 0;
        $order['total_weight'] = 0;
        $order['total_declared'] = 0;
        $order_detail_remain =  [];
        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order['total_box_num'] += $v['box'];
                $order['total_weight'] += $v['cubic_of_volume'] > $v['weighting_weight'] ? $v['cubic_of_volume'] : $v['weighting_weight'];
                $order['total_declared'] += $v['declared'];
            }
        }
        for( $i = 0; $i < 4 - count($order_detail); $i++ ) {
            $order_detail_remain[] = [];
        }


        $this->assign('order', $order);
        $this->assign('order_detail', $order_detail);
        $this->assign('order_detail_remain', $order_detail_remain);
        $this->display();
    }

    public function packing() {
        $client_id = session('hkwcd_user.user_id');
        $client = M('Client')->where(['status' => 1, 'id' => $client_id])->find();
        $id = I('id');
        $order = M('ClientOrder')->where(['id' => $id, 'client_id' => $client_id, 'status' => 1])->find();
        if( empty($order) ) {
            $this->error('订单不存在');
        }
        if( !($order['express_status'] == 1) ) {
            $this->error('当前订单不能打印装箱单');
        }
        $order['express_time'] = date('Y-m-d', strtotime($order['express_time']));
        $country = M('Country')->where(['id' => $order['receive_country_id']])->find();
        $order['country_name'] = $country['name'];
        $order['country_ename'] = $country['ename'];

        $order_detail = M('ClientOrderDetail')->where(['order_num' => $order['order_num']])->select();
//        $order_specifications = M('ClientOrderSpecifications')->where(['order_num' => $order['order_num']])->select();
        $order['total_box_num'] = 0;
        $order['total_weight'] = 0;
        $order['total_declared'] = 0;
        $order_detail_remain =  [];
        if( $order_detail ) {
            foreach( $order_detail as $k => $v ) {
                $order['total_box_num'] += $v['box'];
                $order['total_weight'] += $v['cubic_of_volume'] > $v['weighting_weight'] ? $v['cubic_of_volume'] : $v['weighting_weight'];
                $order['total_declared'] += $v['declared'];
            }
        }
        for( $i = 0; $i < 4 - count($order_detail); $i++ ) {
            $order_detail_remain[] = [];
        }


        $this->assign('order', $order);
        $this->assign('order_detail', $order_detail);
        $this->assign('order_detail_remain', $order_detail_remain);
        $this->display();
    }

    public function getDeliveryList() {
        $client_id = $client_id = session('hkwcd_user.user_id');
        $where = [
            'client_id' => $client_id,
            'status' => 1,
        ];
        $delivery_list = M('DeliveryAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where($where)
            ->order('is_default desc, id asc')
            ->select();
        if( $delivery_list ) {
            $temp = [];
            foreach($delivery_list as $k => $v) {
                if( mb_strlen($v['detail_address']) > 20 ) {
                    $v['show_detail_address'] = mb_substr($v['detail_address'], 0, 20).'...';
                } else {
                    $v['show_detail_address'] = $v['detail_address'];
                }
                $temp[$v['id']] = $v;
            }
            $delivery_list = $temp;
        }
        $this->response['code'] = 1;
        $this->response['msg'] = 'success';
        $this->response['data'] = empty($delivery_list) ? [] : $delivery_list;
        echo json_encode($this->response);
        exit;

    }

    public function getReceiveList() {
        $client_id = $client_id = session('hkwcd_user.user_id');
        $where = [
            'client_id' => $client_id,
            'status' => 1,
        ];
        $receive_list = M('ReceiveAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where($where)
            ->order('is_default desc, id asc')
            ->select();
        if( $receive_list ) {
            $temp = [];
            foreach($receive_list as $k => $v) {
                if( mb_strlen($v['detail_address']) > 20 ) {
                    $v['show_detail_address'] = mb_substr($v['detail_address'], 0, 20).'...';
                } else {
                    $v['show_detail_address'] = $v['detail_address'];
                }
                $temp[$v['id']] = $v;
            }
            $receive_list = $temp;
        }
        $this->response['code'] = 1;
        $this->response['msg'] = 'success';
        $this->response['data'] = empty($receive_list) ? [] : $receive_list;
        echo json_encode($this->response);
        exit;

    }

    public function getDefaultDelivery() {
        $client_id = session('hkwcd_user.user_id');
        $default_delivery = M('DeliveryAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where(['client_id' => $client_id, 'status' => 1, 'is_default' => 1])
            ->find();
        if( empty($default_delivery) ) {
            $this->response['code'] = -1;
            $this->response['msg'] = '您没有设置默认的发货地址';
        } else {
            if( mb_strlen($default_delivery['detail_address']) > 20 ) {
                $default_delivery['show_detail_address'] = mb_substr($default_delivery['detail_address'], 0, 20).'...';
            } else {
                $default_delivery['show_detail_address'] = $default_delivery['detail_address'];
            }
            $this->response['code'] = 1;
            $this->response['msg'] = 'success';
            $this->response['data'] = $default_delivery;
        }
        echo json_encode($this->response);
        exit;
    }

    public function getDefaultReceive() {
        $client_id = session('hkwcd_user.user_id');

        $default_receive = M('ReceiveAddress')
            ->alias('d')
            ->field('d.*, c.name as country_name, c.ename as en_country_name')
            ->join("left join hx_country as c on d.country_id = c.id")
            ->where(['client_id' => $client_id, 'status' => 1, 'is_default' => 1])
            ->find();
        if( empty($default_receive) ) {
            $this->response['code'] = -1;
            $this->response['msg'] = '您没有设置默认的发货地址';
        } else {
            if( mb_strlen($default_receive['detail_address']) > 20 ) {
                $default_receive['show_detail_address'] = mb_substr($default_receive['detail_address'], 0, 20).'...';
            } else {
                $default_receive['show_detail_address'] = $default_receive['detail_address'];
            }
            $this->response['code'] = 1;
            $this->response['msg'] = 'success';
            $this->response['data'] = $default_receive;
        }
        echo json_encode($this->response);
        exit;
    }

    private function _order_status($order) {
        $status = '';
        if( $order['error_status'] == 1 ) {
            $status = '订单异常';
            return $status;
        }

        if( $order['client_status'] == 0 ) {
            $status = '未提交';
        }
        if( $order['client_status'] == 1 && $order['exam_status'] == 0 ) {
            $status = '待审核';
            if( $order['is_rejected'] ) {
                $status .= '（驳回）';
            }
        }
        if( $order['client_status'] == 1 && $order['exam_status'] == 1 && $order['express_status'] == 0 ) {
            $status = '待发货';
        }
        if( $order['client_status'] == 1 && $order['exam_status'] == 1 && $order['express_status'] == 1 && $order['receive_status'] == 0 ) {
            $status = '已发货';
        }
        if( $order['client_status'] == 1 && $order['exam_status'] == 1 && $order['express_status'] == 1 && $order['receive_status'] == 1 ) {
            $status = '已收货';
        }
        $status = '' == $status ? '订单异常' : $status;
        return $status;
    }

}